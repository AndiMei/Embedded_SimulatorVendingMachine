
Vending_Machine_Andi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b8  080041b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080041b8  080041b8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041b8  080041b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000078  08004238  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004238  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b792  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f97  00000000  00000000  0002b833  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  0002e370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000152fe  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b20  00000000  00000000  000440f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000755a6  00000000  00000000  0004dc16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c31bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031bc  00000000  00000000  000c3238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004088 	.word	0x08004088

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004088 	.word	0x08004088

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fa68 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d6 	bl	8000308 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8b6 	bl	80002cc <MX_DMA_Init>
//  MX_ADC1_Init();
  myADC_init();
 8000160:	f000 f946 	bl	80003f0 <myADC_init>
  MX_TIM2_Init();
 8000164:	f000 f866 	bl	8000234 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  myTask_init();
 8000168:	f000 faa4 	bl	80006b4 <myTask_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <main+0x2c>)
 800016e:	f002 ffea 	bl	8003146 <HAL_TIM_Base_Start_IT>
//  HAL_ADC_Start_DMA(&hadc1, &buff, 1);
  myADC_Start();
 8000172:	f000 f97b 	bl	800046c <myADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000176:	e7fe      	b.n	8000176 <main+0x2a>
 8000178:	20000128 	.word	0x20000128

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	; 0x50
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f003 fb62 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 faec 	bl	80027b0 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001de:	f000 f901 	bl	80003e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fd56 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800020a:	f000 f8eb 	bl	80003e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000216:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f002 feb2 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000226:	f000 f8dd 	bl	80003e4 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3750      	adds	r7, #80	; 0x50
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800023a:	f107 0308 	add.w	r3, r7, #8
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000248:	463b      	mov	r3, r7
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <MX_TIM2_Init+0x94>)
 8000252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17999;
 8000258:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <MX_TIM2_Init+0x94>)
 800025a:	f244 624f 	movw	r2, #17999	; 0x464f
 800025e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <MX_TIM2_Init+0x94>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <MX_TIM2_Init+0x94>)
 8000268:	2201      	movs	r2, #1
 800026a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800026c:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <MX_TIM2_Init+0x94>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <MX_TIM2_Init+0x94>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000278:	4813      	ldr	r0, [pc, #76]	; (80002c8 <MX_TIM2_Init+0x94>)
 800027a:	f002 ff39 	bl	80030f0 <HAL_TIM_Base_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000284:	f000 f8ae 	bl	80003e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800028e:	f107 0308 	add.w	r3, r7, #8
 8000292:	4619      	mov	r1, r3
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <MX_TIM2_Init+0x94>)
 8000296:	f003 f881 	bl	800339c <HAL_TIM_ConfigClockSource>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002a0:	f000 f8a0 	bl	80003e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002a4:	2300      	movs	r3, #0
 80002a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ac:	463b      	mov	r3, r7
 80002ae:	4619      	mov	r1, r3
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_TIM2_Init+0x94>)
 80002b2:	f003 fa4f 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002bc:	f000 f892 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	3718      	adds	r7, #24
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000128 	.word	0x20000128

080002cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_DMA_Init+0x38>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <MX_DMA_Init+0x38>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_DMA_Init+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	200b      	movs	r0, #11
 80002f0:	f001 feaf 	bl	8002052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002f4:	200b      	movs	r0, #11
 80002f6:	f001 fec8 	bl	800208a <HAL_NVIC_EnableIRQ>

}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800031c:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <MX_GPIO_Init+0xd0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <MX_GPIO_Init+0xd0>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_GPIO_Init+0xd0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0320 	and.w	r3, r3, #32
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <MX_GPIO_Init+0xd0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a27      	ldr	r2, [pc, #156]	; (80003d8 <MX_GPIO_Init+0xd0>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <MX_GPIO_Init+0xd0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034c:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <MX_GPIO_Init+0xd0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <MX_GPIO_Init+0xd0>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_GPIO_Init+0xd0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0308 	and.w	r3, r3, #8
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin 
 8000364:	2200      	movs	r2, #0
 8000366:	f640 71fb 	movw	r1, #4091	; 0xffb
 800036a:	481c      	ldr	r0, [pc, #112]	; (80003dc <MX_GPIO_Init+0xd4>)
 800036c:	f002 fa07 	bl	800277e <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_BKL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000376:	481a      	ldr	r0, [pc, #104]	; (80003e0 <MX_GPIO_Init+0xd8>)
 8000378:	f002 fa01 	bl	800277e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB_PROCESS_Pin PB_CANCEL_Pin */
  GPIO_InitStruct.Pin = PB_PROCESS_Pin|PB_CANCEL_Pin;
 800037c:	2330      	movs	r3, #48	; 0x30
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000384:	2301      	movs	r3, #1
 8000386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	4814      	ldr	r0, [pc, #80]	; (80003e0 <MX_GPIO_Init+0xd8>)
 8000390:	f002 f884 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin 
                           LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin 
                           LCD_D6_Pin LCD_D7_Pin LCD_BKL_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin 
 8000394:	f640 73fb 	movw	r3, #4091	; 0xffb
 8000398:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_BKL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <MX_GPIO_Init+0xd4>)
 80003ae:	f002 f875 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80003b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_GPIO_Init+0xd8>)
 80003cc:	f002 f866 	bl	800249c <HAL_GPIO_Init>

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	40010800 	.word	0x40010800

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <myADC_init>:
 */

#include "myADC.h"

void myADC_init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <myADC_init+0x74>)
 8000402:	4a19      	ldr	r2, [pc, #100]	; (8000468 <myADC_init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <myADC_init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <myADC_init+0x74>)
 800040e:	2201      	movs	r2, #1
 8000410:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <myADC_init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <myADC_init+0x74>)
 800041a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800041e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <myADC_init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <myADC_init+0x74>)
 8000428:	2201      	movs	r2, #1
 800042a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <myADC_init+0x74>)
 800042e:	f001 f97d 	bl	800172c <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <myADC_init+0x4c>
  {
    Error_Handler();
 8000438:	f7ff ffd4 	bl	80003e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000444:	2302      	movs	r3, #2
 8000446:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <myADC_init+0x74>)
 800044e:	f001 fb3f 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <myADC_init+0x6c>
  {
    Error_Handler();
 8000458:	f7ff ffc4 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200000b0 	.word	0x200000b0
 8000468:	40012400 	.word	0x40012400

0800046c <myADC_Start>:

void myADC_Start(void){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, &buffAdc, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	4903      	ldr	r1, [pc, #12]	; (8000480 <myADC_Start+0x14>)
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <myADC_Start+0x18>)
 8000476:	f001 fa31 	bl	80018dc <HAL_ADC_Start_DMA>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000a8 	.word	0x200000a8
 8000484:	200000b0 	.word	0x200000b0

08000488 <myADC_read>:
uint32_t myADC_read(void){
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	return buffAdc;
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <myADC_read+0x10>)
 800048e:	681b      	ldr	r3, [r3, #0]
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	200000a8 	.word	0x200000a8

0800049c <myLCD_init>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "myLCD.h"
#include <stdio.h>

void myLCD_init(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 80004a0:	2019      	movs	r0, #25
 80004a2:	f001 f921 	bl	80016e8 <HAL_Delay>
	myLCD_command(0x33);
 80004a6:	2033      	movs	r0, #51	; 0x33
 80004a8:	f000 f894 	bl	80005d4 <myLCD_command>
	myLCD_command(0x32);
 80004ac:	2032      	movs	r0, #50	; 0x32
 80004ae:	f000 f891 	bl	80005d4 <myLCD_command>
	myLCD_command(0x28);
 80004b2:	2028      	movs	r0, #40	; 0x28
 80004b4:	f000 f88e 	bl	80005d4 <myLCD_command>
	myLCD_command(0x0C);
 80004b8:	200c      	movs	r0, #12
 80004ba:	f000 f88b 	bl	80005d4 <myLCD_command>
	myLCD_command(0x01);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 f888 	bl	80005d4 <myLCD_command>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <myLCD_write4bit>:
void myLCD_write4bit(uint8_t data){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	2120      	movs	r1, #32
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <myLCD_write4bit+0x68>)
 80004e0:	f002 f94d 	bl	800277e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	085b      	lsrs	r3, r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	2140      	movs	r1, #64	; 0x40
 80004f4:	480e      	ldr	r0, [pc, #56]	; (8000530 <myLCD_write4bit+0x68>)
 80004f6:	f002 f942 	bl	800277e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	089b      	lsrs	r3, r3, #2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <myLCD_write4bit+0x68>)
 800050c:	f002 f937 	bl	800277e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	08db      	lsrs	r3, r3, #3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <myLCD_write4bit+0x68>)
 8000524:	f002 f92b 	bl	800277e <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010c00 	.word	0x40010c00

08000534 <myLCD_send>:

void myLCD_send(_Bool mode, uint8_t data){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	if(mode){ myLCD_RS(1); }
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <myLCD_send+0x22>
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	4820      	ldr	r0, [pc, #128]	; (80005d0 <myLCD_send+0x9c>)
 8000550:	f002 f915 	bl	800277e <HAL_GPIO_WritePin>
 8000554:	e004      	b.n	8000560 <myLCD_send+0x2c>
	else	{ myLCD_RS(0); }
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	481d      	ldr	r0, [pc, #116]	; (80005d0 <myLCD_send+0x9c>)
 800055c:	f002 f90f 	bl	800277e <HAL_GPIO_WritePin>

	myLCD_write4bit(data>>4);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	091b      	lsrs	r3, r3, #4
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffae 	bl	80004c8 <myLCD_write4bit>
	myLCD_E();
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4817      	ldr	r0, [pc, #92]	; (80005d0 <myLCD_send+0x9c>)
 8000572:	f002 f904 	bl	800277e <HAL_GPIO_WritePin>
 8000576:	2300      	movs	r3, #0
 8000578:	81fb      	strh	r3, [r7, #14]
 800057a:	e002      	b.n	8000582 <myLCD_send+0x4e>
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	3301      	adds	r3, #1
 8000580:	81fb      	strh	r3, [r7, #14]
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000588:	4293      	cmp	r3, r2
 800058a:	d9f7      	bls.n	800057c <myLCD_send+0x48>
 800058c:	2200      	movs	r2, #0
 800058e:	2110      	movs	r1, #16
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <myLCD_send+0x9c>)
 8000592:	f002 f8f4 	bl	800277e <HAL_GPIO_WritePin>
	myLCD_write4bit(data);
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff95 	bl	80004c8 <myLCD_write4bit>
	myLCD_E();
 800059e:	2201      	movs	r2, #1
 80005a0:	2110      	movs	r1, #16
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <myLCD_send+0x9c>)
 80005a4:	f002 f8eb 	bl	800277e <HAL_GPIO_WritePin>
 80005a8:	2300      	movs	r3, #0
 80005aa:	81bb      	strh	r3, [r7, #12]
 80005ac:	e002      	b.n	80005b4 <myLCD_send+0x80>
 80005ae:	89bb      	ldrh	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	81bb      	strh	r3, [r7, #12]
 80005b4:	89bb      	ldrh	r3, [r7, #12]
 80005b6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d9f7      	bls.n	80005ae <myLCD_send+0x7a>
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <myLCD_send+0x9c>)
 80005c4:	f002 f8db 	bl	800277e <HAL_GPIO_WritePin>

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <myLCD_command>:
void myLCD_command(uint8_t data){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	myLCD_send(0, data);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4619      	mov	r1, r3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffa6 	bl	8000534 <myLCD_send>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <myLCD_data>:
void myLCD_data(uint8_t data){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	myLCD_send(1, data);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ff98 	bl	8000534 <myLCD_send>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <myLCD_setCursor>:
void myLCD_setCursor(uint8_t x, uint8_t y){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	if(y==0) {myLCD_command(0x80 + x); }
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <myLCD_setCursor+0x22>
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	3b80      	subs	r3, #128	; 0x80
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffd3 	bl	80005d4 <myLCD_command>
	if(y==1) {myLCD_command(0xC0 + x); }
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d105      	bne.n	8000640 <myLCD_setCursor+0x34>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3b40      	subs	r3, #64	; 0x40
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ffca 	bl	80005d4 <myLCD_command>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <myLCD_print>:
void myLCD_print(char *pData){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(*pData){
 8000650:	e007      	b.n	8000662 <myLCD_print+0x1a>
		myLCD_data(*pData);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffca 	bl	80005f0 <myLCD_data>
		pData++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
	while(*pData){
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f3      	bne.n	8000652 <myLCD_print+0xa>
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <myLCD_printNum>:
void myLCD_printNum(int16_t number){
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	char buff[20];
	sprintf(buff,"%d",number);
 800067e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <myLCD_printNum+0x2c>)
 8000688:	4618      	mov	r0, r3
 800068a:	f003 f8eb 	bl	8003864 <siprintf>
	myLCD_print(buff);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffd8 	bl	8000648 <myLCD_print>
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	080040a0 	.word	0x080040a0

080006a4 <myLCD_clear>:
void myLCD_clear(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	myLCD_command(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff93 	bl	80005d4 <myLCD_command>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <myTask_init>:
_Bool toggle=0;
_Bool printEn=0;
uint32_t adcku;
//ADC_HandleTypeDef hadc1;

void myTask_init(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	myLCD_init();
 80006b8:	f7ff fef0 	bl	800049c <myLCD_init>
	//	MX_ADC1_Init();
	myLCD_Bkl(1);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <myTask_init+0x44>)
 80006c4:	f002 f85b 	bl	800277e <HAL_GPIO_WritePin>
	ledProcess(0);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2101      	movs	r1, #1
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <myTask_init+0x44>)
 80006ce:	f002 f856 	bl	800277e <HAL_GPIO_WritePin>
	ledCancel(0);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2102      	movs	r1, #2
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <myTask_init+0x44>)
 80006d8:	f002 f851 	bl	800277e <HAL_GPIO_WritePin>
	ledBack(0);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <myTask_init+0x44>)
 80006e4:	f002 f84b 	bl	800277e <HAL_GPIO_WritePin>
	ledDrop(0);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ee:	4802      	ldr	r0, [pc, #8]	; (80006f8 <myTask_init+0x44>)
 80006f0:	f002 f845 	bl	800277e <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40010c00 	.word	0x40010c00

080006fc <myTask_Run>:

void myTask_Run(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	switch (myState){
 8000700:	4b78      	ldr	r3, [pc, #480]	; (80008e4 <myTask_Run+0x1e8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b08      	cmp	r3, #8
 8000706:	f200 8530 	bhi.w	800116a <myTask_Run+0xa6e>
 800070a:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <myTask_Run+0x14>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	08000735 	.word	0x08000735
 8000714:	0800075b 	.word	0x0800075b
 8000718:	0800079b 	.word	0x0800079b
 800071c:	08000915 	.word	0x08000915
 8000720:	08000a61 	.word	0x08000a61
 8000724:	08000b51 	.word	0x08000b51
 8000728:	08000dd5 	.word	0x08000dd5
 800072c:	08000ee7 	.word	0x08000ee7
 8000730:	08001035 	.word	0x08001035
	case start:{
		myLCD_setCursor(0, 0); myLCD_print("Vending Machine");
 8000734:	2100      	movs	r1, #0
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ff68 	bl	800060c <myLCD_setCursor>
 800073c:	486a      	ldr	r0, [pc, #424]	; (80008e8 <myTask_Run+0x1ec>)
 800073e:	f7ff ff83 	bl	8000648 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("   Andi Mei");
 8000742:	2101      	movs	r1, #1
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff61 	bl	800060c <myLCD_setCursor>
 800074a:	4868      	ldr	r0, [pc, #416]	; (80008ec <myTask_Run+0x1f0>)
 800074c:	f7ff ff7c 	bl	8000648 <myLCD_print>
		myState=startDelay;
 8000750:	4b64      	ldr	r3, [pc, #400]	; (80008e4 <myTask_Run+0x1e8>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
	}break;
 8000756:	f000 bd08 	b.w	800116a <myTask_Run+0xa6e>
		//			mal =0;
		////			myLCD_clear();
		////			printEn=1;
		////			myState=cancel;
		//		}
		if(++delay > 4000){
 800075a:	4b65      	ldr	r3, [pc, #404]	; (80008f0 <myTask_Run+0x1f4>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b29b      	uxth	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b29b      	uxth	r3, r3
 8000764:	4a62      	ldr	r2, [pc, #392]	; (80008f0 <myTask_Run+0x1f4>)
 8000766:	4619      	mov	r1, r3
 8000768:	8011      	strh	r1, [r2, #0]
 800076a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800076e:	f240 84ed 	bls.w	800114c <myTask_Run+0xa50>
			delay=0;
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <myTask_Run+0x1f4>)
 8000774:	2200      	movs	r2, #0
 8000776:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000778:	f7ff ff94 	bl	80006a4 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Insert Coin !");
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff ff44 	bl	800060c <myLCD_setCursor>
 8000784:	485b      	ldr	r0, [pc, #364]	; (80008f4 <myTask_Run+0x1f8>)
 8000786:	f7ff ff5f 	bl	8000648 <myLCD_print>
			printEn=1;
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <myTask_Run+0x1fc>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
			myState=insertCoin1;
 8000790:	4b54      	ldr	r3, [pc, #336]	; (80008e4 <myTask_Run+0x1e8>)
 8000792:	2202      	movs	r2, #2
 8000794:	701a      	strb	r2, [r3, #0]
		}

	}break;
 8000796:	f000 bcd9 	b.w	800114c <myTask_Run+0xa50>

	case insertCoin1:{
		//		adcku = myADC_Read();
		/*	Printed once in loop	*/
		if(printEn){
 800079a:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <myTask_Run+0x1fc>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d010      	beq.n	80007c4 <myTask_Run+0xc8>
			printEn=0;
 80007a2:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <myTask_Run+0x1fc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 1); myLCD_print("Money: "); myLCD_printNum(money);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff2e 	bl	800060c <myLCD_setCursor>
 80007b0:	4852      	ldr	r0, [pc, #328]	; (80008fc <myTask_Run+0x200>)
 80007b2:	f7ff ff49 	bl	8000648 <myLCD_print>
 80007b6:	4b52      	ldr	r3, [pc, #328]	; (8000900 <myTask_Run+0x204>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff58 	bl	8000674 <myLCD_printNum>
		}

		/*	Check type of coin when sensor detected, and give appropriate flag	*/
		if(Detect_500()){
 80007c4:	f000 fd7c 	bl	80012c0 <Detect_500>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d011      	beq.n	80007f2 <myTask_Run+0xf6>
			buzzer(1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d4:	484b      	ldr	r0, [pc, #300]	; (8000904 <myTask_Run+0x208>)
 80007d6:	f001 ffd2 	bl	800277e <HAL_GPIO_WritePin>
			myLCD_clear();
 80007da:	f7ff ff63 	bl	80006a4 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.500 inserted !");
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff13 	bl	800060c <myLCD_setCursor>
 80007e6:	4848      	ldr	r0, [pc, #288]	; (8000908 <myTask_Run+0x20c>)
 80007e8:	f7ff ff2e 	bl	8000648 <myLCD_print>
			myFlag=in500;
 80007ec:	4b47      	ldr	r3, [pc, #284]	; (800090c <myTask_Run+0x210>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
		}

		if(Detect_1000()){
 80007f2:	f000 fd31 	bl	8001258 <Detect_1000>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d011      	beq.n	8000820 <myTask_Run+0x124>
			buzzer(1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000802:	4840      	ldr	r0, [pc, #256]	; (8000904 <myTask_Run+0x208>)
 8000804:	f001 ffbb 	bl	800277e <HAL_GPIO_WritePin>
			myLCD_clear();
 8000808:	f7ff ff4c 	bl	80006a4 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.1000 inserted");
 800080c:	2100      	movs	r1, #0
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fefc 	bl	800060c <myLCD_setCursor>
 8000814:	483e      	ldr	r0, [pc, #248]	; (8000910 <myTask_Run+0x214>)
 8000816:	f7ff ff17 	bl	8000648 <myLCD_print>
			myFlag=in1000;
 800081a:	4b3c      	ldr	r3, [pc, #240]	; (800090c <myTask_Run+0x210>)
 800081c:	2202      	movs	r2, #2
 800081e:	701a      	strb	r2, [r3, #0]
		}

		/*	Check flag and goto next state	*/
		if(myFlag==in500){
 8000820:	4b3a      	ldr	r3, [pc, #232]	; (800090c <myTask_Run+0x210>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d12d      	bne.n	8000884 <myTask_Run+0x188>
			if(++delay > 2000){
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <myTask_Run+0x1f4>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	3301      	adds	r3, #1
 8000830:	b29b      	uxth	r3, r3
 8000832:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <myTask_Run+0x1f4>)
 8000834:	4619      	mov	r1, r3
 8000836:	8011      	strh	r1, [r2, #0]
 8000838:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800083c:	d922      	bls.n	8000884 <myTask_Run+0x188>
				delay=0;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <myTask_Run+0x1f4>)
 8000840:	2200      	movs	r2, #0
 8000842:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	482e      	ldr	r0, [pc, #184]	; (8000904 <myTask_Run+0x208>)
 800084c:	f001 ff97 	bl	800277e <HAL_GPIO_WritePin>
				money+=500;
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <myTask_Run+0x204>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <myTask_Run+0x204>)
 800085e:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000860:	f7ff ff20 	bl	80006a4 <myLCD_clear>
				myFlag=noCoin;
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <myTask_Run+0x210>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Insert Coin !");
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fecd 	bl	800060c <myLCD_setCursor>
 8000872:	4820      	ldr	r0, [pc, #128]	; (80008f4 <myTask_Run+0x1f8>)
 8000874:	f7ff fee8 	bl	8000648 <myLCD_print>
				printEn=1;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <myTask_Run+0x1fc>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
				myState=insertCoin2;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <myTask_Run+0x1e8>)
 8000880:	2203      	movs	r2, #3
 8000882:	701a      	strb	r2, [r3, #0]
			}
		}

		if(myFlag==in1000){
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <myTask_Run+0x210>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b02      	cmp	r3, #2
 800088a:	f040 8461 	bne.w	8001150 <myTask_Run+0xa54>
			if(++delay > 2000){
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <myTask_Run+0x1f4>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	b29b      	uxth	r3, r3
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <myTask_Run+0x1f4>)
 800089a:	4619      	mov	r1, r3
 800089c:	8011      	strh	r1, [r2, #0]
 800089e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008a2:	f240 8455 	bls.w	8001150 <myTask_Run+0xa54>
				delay=0;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <myTask_Run+0x1f4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <myTask_Run+0x208>)
 80008b4:	f001 ff63 	bl	800277e <HAL_GPIO_WritePin>
				money+=1000;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <myTask_Run+0x204>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <myTask_Run+0x204>)
 80008c6:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 80008c8:	f7ff feec 	bl	80006a4 <myLCD_clear>
				myFlag=noCoin;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <myTask_Run+0x210>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
				printEn=1;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <myTask_Run+0x1fc>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
				myState=ready;
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <myTask_Run+0x1e8>)
 80008da:	2204      	movs	r2, #4
 80008dc:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 80008de:	f000 bc37 	b.w	8001150 <myTask_Run+0xa54>
 80008e2:	bf00      	nop
 80008e4:	2000016c 	.word	0x2000016c
 80008e8:	080040a4 	.word	0x080040a4
 80008ec:	080040b4 	.word	0x080040b4
 80008f0:	20000094 	.word	0x20000094
 80008f4:	080040c0 	.word	0x080040c0
 80008f8:	2000009a 	.word	0x2000009a
 80008fc:	080040d0 	.word	0x080040d0
 8000900:	20000096 	.word	0x20000096
 8000904:	40010800 	.word	0x40010800
 8000908:	080040d8 	.word	0x080040d8
 800090c:	2000016d 	.word	0x2000016d
 8000910:	080040ec 	.word	0x080040ec

	case insertCoin2:{

		/*	Printed once in loop	*/
		if(printEn){
 8000914:	4b84      	ldr	r3, [pc, #528]	; (8000b28 <myTask_Run+0x42c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d010      	beq.n	800093e <myTask_Run+0x242>
			printEn=0;
 800091c:	4b82      	ldr	r3, [pc, #520]	; (8000b28 <myTask_Run+0x42c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 1); myLCD_print("Money: "); myLCD_printNum(money);
 8000922:	2101      	movs	r1, #1
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe71 	bl	800060c <myLCD_setCursor>
 800092a:	4880      	ldr	r0, [pc, #512]	; (8000b2c <myTask_Run+0x430>)
 800092c:	f7ff fe8c 	bl	8000648 <myLCD_print>
 8000930:	4b7f      	ldr	r3, [pc, #508]	; (8000b30 <myTask_Run+0x434>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	b21b      	sxth	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe9b 	bl	8000674 <myLCD_printNum>
		}

		/*	Check type of coin when sensor detected, and give appropriate flag	*/
		if(Detect_500()){
 800093e:	f000 fcbf 	bl	80012c0 <Detect_500>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d011      	beq.n	800096c <myTask_Run+0x270>
			buzzer(1);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094e:	4879      	ldr	r0, [pc, #484]	; (8000b34 <myTask_Run+0x438>)
 8000950:	f001 ff15 	bl	800277e <HAL_GPIO_WritePin>
			myLCD_clear();
 8000954:	f7ff fea6 	bl	80006a4 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.500 inserted");
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fe56 	bl	800060c <myLCD_setCursor>
 8000960:	4875      	ldr	r0, [pc, #468]	; (8000b38 <myTask_Run+0x43c>)
 8000962:	f7ff fe71 	bl	8000648 <myLCD_print>
			myFlag=in500;
 8000966:	4b75      	ldr	r3, [pc, #468]	; (8000b3c <myTask_Run+0x440>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
		}

		if(Detect_1000()){
 800096c:	f000 fc74 	bl	8001258 <Detect_1000>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d011      	beq.n	800099a <myTask_Run+0x29e>
			buzzer(1);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	486d      	ldr	r0, [pc, #436]	; (8000b34 <myTask_Run+0x438>)
 800097e:	f001 fefe 	bl	800277e <HAL_GPIO_WritePin>
			myLCD_clear();
 8000982:	f7ff fe8f 	bl	80006a4 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.1000 inserted");
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fe3f 	bl	800060c <myLCD_setCursor>
 800098e:	486c      	ldr	r0, [pc, #432]	; (8000b40 <myTask_Run+0x444>)
 8000990:	f7ff fe5a 	bl	8000648 <myLCD_print>
			myFlag=in1000;
 8000994:	4b69      	ldr	r3, [pc, #420]	; (8000b3c <myTask_Run+0x440>)
 8000996:	2202      	movs	r2, #2
 8000998:	701a      	strb	r2, [r3, #0]
		}
		if(PB_Cancel()){
 800099a:	f000 fc2d 	bl	80011f8 <PB_Cancel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <myTask_Run+0x2b8>
			myLCD_clear();
 80009a4:	f7ff fe7e 	bl	80006a4 <myLCD_clear>
			printEn=1;
 80009a8:	4b5f      	ldr	r3, [pc, #380]	; (8000b28 <myTask_Run+0x42c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
			myState=cancel;
 80009ae:	4b65      	ldr	r3, [pc, #404]	; (8000b44 <myTask_Run+0x448>)
 80009b0:	2205      	movs	r2, #5
 80009b2:	701a      	strb	r2, [r3, #0]
		}

		/*	Check flag and goto next state	*/
		if(myFlag==in500){
 80009b4:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <myTask_Run+0x440>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d126      	bne.n	8000a0a <myTask_Run+0x30e>
			if(++delay > 2000){
 80009bc:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <myTask_Run+0x44c>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3301      	adds	r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <myTask_Run+0x44c>)
 80009c8:	4619      	mov	r1, r3
 80009ca:	8011      	strh	r1, [r2, #0]
 80009cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009d0:	d91b      	bls.n	8000a0a <myTask_Run+0x30e>
				delay=0;
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <myTask_Run+0x44c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009de:	4855      	ldr	r0, [pc, #340]	; (8000b34 <myTask_Run+0x438>)
 80009e0:	f001 fecd 	bl	800277e <HAL_GPIO_WritePin>
				money+=500;
 80009e4:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <myTask_Run+0x434>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <myTask_Run+0x434>)
 80009f2:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 80009f4:	f7ff fe56 	bl	80006a4 <myLCD_clear>
				printEn=1;
 80009f8:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <myTask_Run+0x42c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
				myFlag=noCoin;
 80009fe:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <myTask_Run+0x440>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
				myState=ready;
 8000a04:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <myTask_Run+0x448>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	701a      	strb	r2, [r3, #0]
			}
		}

		if(myFlag==in1000){
 8000a0a:	4b4c      	ldr	r3, [pc, #304]	; (8000b3c <myTask_Run+0x440>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	f040 83a0 	bne.w	8001154 <myTask_Run+0xa58>
			if(++delay > 2000){
 8000a14:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <myTask_Run+0x44c>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <myTask_Run+0x44c>)
 8000a20:	4619      	mov	r1, r3
 8000a22:	8011      	strh	r1, [r2, #0]
 8000a24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a28:	f240 8394 	bls.w	8001154 <myTask_Run+0xa58>
				delay=0;
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <myTask_Run+0x44c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a38:	483e      	ldr	r0, [pc, #248]	; (8000b34 <myTask_Run+0x438>)
 8000a3a:	f001 fea0 	bl	800277e <HAL_GPIO_WritePin>
				money+=1000;
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <myTask_Run+0x434>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <myTask_Run+0x434>)
 8000a4c:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000a4e:	f7ff fe29 	bl	80006a4 <myLCD_clear>
				myFlag=noCoin;
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <myTask_Run+0x440>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
				myState=k500;
 8000a58:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <myTask_Run+0x448>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8000a5e:	e379      	b.n	8001154 <myTask_Run+0xa58>

	case ready:{
		if(printEn){	//printed once
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <myTask_Run+0x42c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d017      	beq.n	8000a98 <myTask_Run+0x39c>
			printEn=0;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <myTask_Run+0x42c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Process? (Y/N)");
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fdcb 	bl	800060c <myLCD_setCursor>
 8000a76:	4835      	ldr	r0, [pc, #212]	; (8000b4c <myTask_Run+0x450>)
 8000a78:	f7ff fde6 	bl	8000648 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Money: "); myLCD_printNum(money);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fdc4 	bl	800060c <myLCD_setCursor>
 8000a84:	4829      	ldr	r0, [pc, #164]	; (8000b2c <myTask_Run+0x430>)
 8000a86:	f7ff fddf 	bl	8000648 <myLCD_print>
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <myTask_Run+0x434>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fdee 	bl	8000674 <myLCD_printNum>
		}

		if(PB_Process()){
 8000a98:	f000 fb7e 	bl	8001198 <PB_Process>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00f      	beq.n	8000ac2 <myTask_Run+0x3c6>
			money-=1000;			//money is taken to pay candy
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <myTask_Run+0x434>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <myTask_Run+0x434>)
 8000ab0:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000ab2:	f7ff fdf7 	bl	80006a4 <myLCD_clear>
			printEn=1;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <myTask_Run+0x42c>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			myState=drop;
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <myTask_Run+0x448>)
 8000abe:	2206      	movs	r2, #6
 8000ac0:	701a      	strb	r2, [r3, #0]
		}
		if(PB_Cancel()){
 8000ac2:	f000 fb99 	bl	80011f8 <PB_Cancel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d007      	beq.n	8000adc <myTask_Run+0x3e0>
			myLCD_clear();
 8000acc:	f7ff fdea 	bl	80006a4 <myLCD_clear>
			printEn=1;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <myTask_Run+0x42c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
			myState=cancel;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <myTask_Run+0x448>)
 8000ad8:	2205      	movs	r2, #5
 8000ada:	701a      	strb	r2, [r3, #0]
		}
		if(Detect_500()){
 8000adc:	f000 fbf0 	bl	80012c0 <Detect_500>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00c      	beq.n	8000b00 <myTask_Run+0x404>
			money+=500;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <myTask_Run+0x434>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <myTask_Run+0x434>)
 8000af4:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000af6:	f7ff fdd5 	bl	80006a4 <myLCD_clear>
			myState=k500;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <myTask_Run+0x448>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	701a      	strb	r2, [r3, #0]
		}
		if(Detect_1000()){
 8000b00:	f000 fbaa 	bl	8001258 <Detect_1000>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8326 	beq.w	8001158 <myTask_Run+0xa5c>
			money+=1000;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <myTask_Run+0x434>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <myTask_Run+0x434>)
 8000b1a:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000b1c:	f7ff fdc2 	bl	80006a4 <myLCD_clear>
			myState=k1000;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <myTask_Run+0x448>)
 8000b22:	2208      	movs	r2, #8
 8000b24:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000b26:	e317      	b.n	8001158 <myTask_Run+0xa5c>
 8000b28:	2000009a 	.word	0x2000009a
 8000b2c:	080040d0 	.word	0x080040d0
 8000b30:	20000096 	.word	0x20000096
 8000b34:	40010800 	.word	0x40010800
 8000b38:	08004100 	.word	0x08004100
 8000b3c:	2000016d 	.word	0x2000016d
 8000b40:	080040ec 	.word	0x080040ec
 8000b44:	2000016c 	.word	0x2000016c
 8000b48:	20000094 	.word	0x20000094
 8000b4c:	08004110 	.word	0x08004110

	case cancel:{
		/* check money in machine	*/
		if(money==500){
 8000b50:	4b95      	ldr	r3, [pc, #596]	; (8000da8 <myTask_Run+0x6ac>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b5a:	f040 808f 	bne.w	8000c7c <myTask_Run+0x580>
			/* Printed once in loop	*/
			if(printEn){
 8000b5e:	4b93      	ldr	r3, [pc, #588]	; (8000dac <myTask_Run+0x6b0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d010      	beq.n	8000b88 <myTask_Run+0x48c>
				printEn=0;
 8000b66:	4b91      	ldr	r3, [pc, #580]	; (8000dac <myTask_Run+0x6b0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd4c 	bl	800060c <myLCD_setCursor>
 8000b74:	488e      	ldr	r0, [pc, #568]	; (8000db0 <myTask_Run+0x6b4>)
 8000b76:	f7ff fd67 	bl	8000648 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fd45 	bl	800060c <myLCD_setCursor>
 8000b82:	488c      	ldr	r0, [pc, #560]	; (8000db4 <myTask_Run+0x6b8>)
 8000b84:	f7ff fd60 	bl	8000648 <myLCD_print>
			}

			/* Blinky LED and buzzer beep	*/
			if((++delay > 200) && (i<=9)){
 8000b88:	4b8b      	ldr	r3, [pc, #556]	; (8000db8 <myTask_Run+0x6bc>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4a89      	ldr	r2, [pc, #548]	; (8000db8 <myTask_Run+0x6bc>)
 8000b94:	4619      	mov	r1, r3
 8000b96:	8011      	strh	r1, [r2, #0]
 8000b98:	2bc8      	cmp	r3, #200	; 0xc8
 8000b9a:	d930      	bls.n	8000bfe <myTask_Run+0x502>
 8000b9c:	4b87      	ldr	r3, [pc, #540]	; (8000dbc <myTask_Run+0x6c0>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b09      	cmp	r3, #9
 8000ba4:	d82b      	bhi.n	8000bfe <myTask_Run+0x502>
				delay=0;
 8000ba6:	4b84      	ldr	r3, [pc, #528]	; (8000db8 <myTask_Run+0x6bc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	801a      	strh	r2, [r3, #0]
				toggle=!(toggle);
 8000bac:	4b84      	ldr	r3, [pc, #528]	; (8000dc0 <myTask_Run+0x6c4>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b7e      	ldr	r3, [pc, #504]	; (8000dc0 <myTask_Run+0x6c4>)
 8000bc8:	701a      	strb	r2, [r3, #0]
				buzzer(toggle);
 8000bca:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <myTask_Run+0x6c4>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd4:	487b      	ldr	r0, [pc, #492]	; (8000dc4 <myTask_Run+0x6c8>)
 8000bd6:	f001 fdd2 	bl	800277e <HAL_GPIO_WritePin>
				ledLoading(toggle);
 8000bda:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <myTask_Run+0x6c4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f083 0301 	eor.w	r3, r3, #1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4877      	ldr	r0, [pc, #476]	; (8000dc8 <myTask_Run+0x6cc>)
 8000bec:	f001 fdc7 	bl	800277e <HAL_GPIO_WritePin>
				i++;
 8000bf0:	4b72      	ldr	r3, [pc, #456]	; (8000dbc <myTask_Run+0x6c0>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b70      	ldr	r3, [pc, #448]	; (8000dbc <myTask_Run+0x6c0>)
 8000bfc:	701a      	strb	r2, [r3, #0]
			}

			/* goto next state after blinky	*/
			if(i>=8){
 8000bfe:	4b6f      	ldr	r3, [pc, #444]	; (8000dbc <myTask_Run+0x6c0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	f240 82a9 	bls.w	800115c <myTask_Run+0xa60>
				led500(1);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	486e      	ldr	r0, [pc, #440]	; (8000dc8 <myTask_Run+0x6cc>)
 8000c10:	f001 fdb5 	bl	800277e <HAL_GPIO_WritePin>
				buzzer(1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1a:	486a      	ldr	r0, [pc, #424]	; (8000dc4 <myTask_Run+0x6c8>)
 8000c1c:	f001 fdaf 	bl	800277e <HAL_GPIO_WritePin>
				if(++delay > 2000){
 8000c20:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <myTask_Run+0x6bc>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4a63      	ldr	r2, [pc, #396]	; (8000db8 <myTask_Run+0x6bc>)
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	8011      	strh	r1, [r2, #0]
 8000c30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c34:	f240 8292 	bls.w	800115c <myTask_Run+0xa60>
					i=0;
 8000c38:	4b60      	ldr	r3, [pc, #384]	; (8000dbc <myTask_Run+0x6c0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
					led500(0);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2101      	movs	r1, #1
 8000c42:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <myTask_Run+0x6cc>)
 8000c44:	f001 fd9b 	bl	800277e <HAL_GPIO_WritePin>
					buzzer(0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4e:	485d      	ldr	r0, [pc, #372]	; (8000dc4 <myTask_Run+0x6c8>)
 8000c50:	f001 fd95 	bl	800277e <HAL_GPIO_WritePin>
					delay=0;
 8000c54:	4b58      	ldr	r3, [pc, #352]	; (8000db8 <myTask_Run+0x6bc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	801a      	strh	r2, [r3, #0]
					myLCD_clear();
 8000c5a:	f7ff fd23 	bl	80006a4 <myLCD_clear>
					printEn=1;
 8000c5e:	4b53      	ldr	r3, [pc, #332]	; (8000dac <myTask_Run+0x6b0>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
					money-=500;		//500 refunded
 8000c64:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <myTask_Run+0x6ac>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <myTask_Run+0x6ac>)
 8000c72:	801a      	strh	r2, [r3, #0]
					myState=start;
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <myTask_Run+0x6d0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
					myState=start;
				}
			}
		}

	}break;
 8000c7a:	e26f      	b.n	800115c <myTask_Run+0xa60>
		else if(money==1000){
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <myTask_Run+0x6ac>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c86:	f040 8269 	bne.w	800115c <myTask_Run+0xa60>
			if(printEn){
 8000c8a:	4b48      	ldr	r3, [pc, #288]	; (8000dac <myTask_Run+0x6b0>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d010      	beq.n	8000cb4 <myTask_Run+0x5b8>
				printEn=0;
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <myTask_Run+0x6b0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fcb6 	bl	800060c <myLCD_setCursor>
 8000ca0:	4843      	ldr	r0, [pc, #268]	; (8000db0 <myTask_Run+0x6b4>)
 8000ca2:	f7ff fcd1 	bl	8000648 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fcaf 	bl	800060c <myLCD_setCursor>
 8000cae:	4848      	ldr	r0, [pc, #288]	; (8000dd0 <myTask_Run+0x6d4>)
 8000cb0:	f7ff fcca 	bl	8000648 <myLCD_print>
			if((++delay > 200) && (i<=9)){
 8000cb4:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <myTask_Run+0x6bc>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <myTask_Run+0x6bc>)
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	8011      	strh	r1, [r2, #0]
 8000cc4:	2bc8      	cmp	r3, #200	; 0xc8
 8000cc6:	d930      	bls.n	8000d2a <myTask_Run+0x62e>
 8000cc8:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <myTask_Run+0x6c0>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b09      	cmp	r3, #9
 8000cd0:	d82b      	bhi.n	8000d2a <myTask_Run+0x62e>
				delay=0;
 8000cd2:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <myTask_Run+0x6bc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	801a      	strh	r2, [r3, #0]
				toggle=!(toggle);
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <myTask_Run+0x6c4>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bf14      	ite	ne
 8000ce0:	2301      	movne	r3, #1
 8000ce2:	2300      	moveq	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <myTask_Run+0x6c4>)
 8000cf4:	701a      	strb	r2, [r3, #0]
				buzzer(toggle);
 8000cf6:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <myTask_Run+0x6c4>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d00:	4830      	ldr	r0, [pc, #192]	; (8000dc4 <myTask_Run+0x6c8>)
 8000d02:	f001 fd3c 	bl	800277e <HAL_GPIO_WritePin>
				ledLoading(toggle);
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <myTask_Run+0x6c4>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d16:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <myTask_Run+0x6cc>)
 8000d18:	f001 fd31 	bl	800277e <HAL_GPIO_WritePin>
				i++;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <myTask_Run+0x6c0>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <myTask_Run+0x6c0>)
 8000d28:	701a      	strb	r2, [r3, #0]
			if(i>=8){
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <myTask_Run+0x6c0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	f240 8213 	bls.w	800115c <myTask_Run+0xa60>
				led1000(1);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <myTask_Run+0x6cc>)
 8000d3c:	f001 fd1f 	bl	800277e <HAL_GPIO_WritePin>
				buzzer(1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <myTask_Run+0x6c8>)
 8000d48:	f001 fd19 	bl	800277e <HAL_GPIO_WritePin>
				if(++delay > 2000){
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <myTask_Run+0x6bc>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <myTask_Run+0x6bc>)
 8000d58:	4619      	mov	r1, r3
 8000d5a:	8011      	strh	r1, [r2, #0]
 8000d5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d60:	f240 81fc 	bls.w	800115c <myTask_Run+0xa60>
					i=0;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <myTask_Run+0x6c0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
					led1000(0);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <myTask_Run+0x6cc>)
 8000d70:	f001 fd05 	bl	800277e <HAL_GPIO_WritePin>
					buzzer(0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <myTask_Run+0x6c8>)
 8000d7c:	f001 fcff 	bl	800277e <HAL_GPIO_WritePin>
					delay=0;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <myTask_Run+0x6bc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	801a      	strh	r2, [r3, #0]
					myLCD_clear();
 8000d86:	f7ff fc8d 	bl	80006a4 <myLCD_clear>
					printEn=1;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <myTask_Run+0x6b0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
					money-=1000;	//1000 refunded
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <myTask_Run+0x6ac>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <myTask_Run+0x6ac>)
 8000d9e:	801a      	strh	r2, [r3, #0]
					myState=start;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <myTask_Run+0x6d0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	}break;
 8000da6:	e1d9      	b.n	800115c <myTask_Run+0xa60>
 8000da8:	20000096 	.word	0x20000096
 8000dac:	2000009a 	.word	0x2000009a
 8000db0:	08004120 	.word	0x08004120
 8000db4:	08004134 	.word	0x08004134
 8000db8:	20000094 	.word	0x20000094
 8000dbc:	20000098 	.word	0x20000098
 8000dc0:	20000099 	.word	0x20000099
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	2000016c 	.word	0x2000016c
 8000dd0:	0800413c 	.word	0x0800413c

	case drop:{
		/*	printed once in loop	*/
		if(printEn){
 8000dd4:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <myTask_Run+0x908>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d010      	beq.n	8000dfe <myTask_Run+0x702>
			printEn=0;
 8000ddc:	4b89      	ldr	r3, [pc, #548]	; (8001004 <myTask_Run+0x908>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Success !");
 8000de2:	2100      	movs	r1, #0
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fc11 	bl	800060c <myLCD_setCursor>
 8000dea:	4887      	ldr	r0, [pc, #540]	; (8001008 <myTask_Run+0x90c>)
 8000dec:	f7ff fc2c 	bl	8000648 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Candy Dropped");
 8000df0:	2101      	movs	r1, #1
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fc0a 	bl	800060c <myLCD_setCursor>
 8000df8:	4884      	ldr	r0, [pc, #528]	; (800100c <myTask_Run+0x910>)
 8000dfa:	f7ff fc25 	bl	8000648 <myLCD_print>
		}

		/* Blinky LED and buzzer beep	*/
		if((++delay > 200) && (i<=9)){
 8000dfe:	4b84      	ldr	r3, [pc, #528]	; (8001010 <myTask_Run+0x914>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4a81      	ldr	r2, [pc, #516]	; (8001010 <myTask_Run+0x914>)
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	8011      	strh	r1, [r2, #0]
 8000e0e:	2bc8      	cmp	r3, #200	; 0xc8
 8000e10:	d930      	bls.n	8000e74 <myTask_Run+0x778>
 8000e12:	4b80      	ldr	r3, [pc, #512]	; (8001014 <myTask_Run+0x918>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	d82b      	bhi.n	8000e74 <myTask_Run+0x778>
			delay=0;
 8000e1c:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <myTask_Run+0x914>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8000e22:	4b7d      	ldr	r3, [pc, #500]	; (8001018 <myTask_Run+0x91c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b76      	ldr	r3, [pc, #472]	; (8001018 <myTask_Run+0x91c>)
 8000e3e:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 8000e40:	4b75      	ldr	r3, [pc, #468]	; (8001018 <myTask_Run+0x91c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4a:	4874      	ldr	r0, [pc, #464]	; (800101c <myTask_Run+0x920>)
 8000e4c:	f001 fc97 	bl	800277e <HAL_GPIO_WritePin>
			ledLoading(toggle);
 8000e50:	4b71      	ldr	r3, [pc, #452]	; (8001018 <myTask_Run+0x91c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	486f      	ldr	r0, [pc, #444]	; (8001020 <myTask_Run+0x924>)
 8000e62:	f001 fc8c 	bl	800277e <HAL_GPIO_WritePin>
			i++;
 8000e66:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <myTask_Run+0x918>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b68      	ldr	r3, [pc, #416]	; (8001014 <myTask_Run+0x918>)
 8000e72:	701a      	strb	r2, [r3, #0]
		}

		/* goto next state after blinky	*/
		if(i>=8){
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <myTask_Run+0x918>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b07      	cmp	r3, #7
 8000e7c:	f240 8170 	bls.w	8001160 <myTask_Run+0xa64>
			ledDrop(1);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e86:	4866      	ldr	r0, [pc, #408]	; (8001020 <myTask_Run+0x924>)
 8000e88:	f001 fc79 	bl	800277e <HAL_GPIO_WritePin>
			buzzer(1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e92:	4862      	ldr	r0, [pc, #392]	; (800101c <myTask_Run+0x920>)
 8000e94:	f001 fc73 	bl	800277e <HAL_GPIO_WritePin>
			if(++delay > 2000){
 8000e98:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <myTask_Run+0x914>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <myTask_Run+0x914>)
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	8011      	strh	r1, [r2, #0]
 8000ea8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000eac:	f240 8158 	bls.w	8001160 <myTask_Run+0xa64>
				i=0;
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <myTask_Run+0x918>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
				ledDrop(0);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebc:	4858      	ldr	r0, [pc, #352]	; (8001020 <myTask_Run+0x924>)
 8000ebe:	f001 fc5e 	bl	800277e <HAL_GPIO_WritePin>
				buzzer(0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	4854      	ldr	r0, [pc, #336]	; (800101c <myTask_Run+0x920>)
 8000eca:	f001 fc58 	bl	800277e <HAL_GPIO_WritePin>
				delay=0;
 8000ece:	4b50      	ldr	r3, [pc, #320]	; (8001010 <myTask_Run+0x914>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000ed4:	f7ff fbe6 	bl	80006a4 <myLCD_clear>
				printEn=1;
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <myTask_Run+0x908>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
				myState=start;
 8000ede:	4b51      	ldr	r3, [pc, #324]	; (8001024 <myTask_Run+0x928>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8000ee4:	e13c      	b.n	8001160 <myTask_Run+0xa64>

	case k500:{
		/* Money overflow	*/
		if(money==1500){
 8000ee6:	4b50      	ldr	r3, [pc, #320]	; (8001028 <myTask_Run+0x92c>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d115      	bne.n	8000f20 <myTask_Run+0x824>
			money-=500;		//500 refunded
 8000ef4:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <myTask_Run+0x92c>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b49      	ldr	r3, [pc, #292]	; (8001028 <myTask_Run+0x92c>)
 8000f02:	801a      	strh	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8000f04:	2100      	movs	r1, #0
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fb80 	bl	800060c <myLCD_setCursor>
 8000f0c:	4847      	ldr	r0, [pc, #284]	; (800102c <myTask_Run+0x930>)
 8000f0e:	f7ff fb9b 	bl	8000648 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8000f12:	2101      	movs	r1, #1
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fb79 	bl	800060c <myLCD_setCursor>
 8000f1a:	4845      	ldr	r0, [pc, #276]	; (8001030 <myTask_Run+0x934>)
 8000f1c:	f7ff fb94 	bl	8000648 <myLCD_print>
		}

		/* Blinky LED and buzzer beep	*/
		if((++delay > 200) && (i<=9)){
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <myTask_Run+0x914>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3301      	adds	r3, #1
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4a39      	ldr	r2, [pc, #228]	; (8001010 <myTask_Run+0x914>)
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	8011      	strh	r1, [r2, #0]
 8000f30:	2bc8      	cmp	r3, #200	; 0xc8
 8000f32:	d930      	bls.n	8000f96 <myTask_Run+0x89a>
 8000f34:	4b37      	ldr	r3, [pc, #220]	; (8001014 <myTask_Run+0x918>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b09      	cmp	r3, #9
 8000f3c:	d82b      	bhi.n	8000f96 <myTask_Run+0x89a>
			delay=0;
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <myTask_Run+0x914>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <myTask_Run+0x91c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf14      	ite	ne
 8000f4c:	2301      	movne	r3, #1
 8000f4e:	2300      	moveq	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f083 0301 	eor.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <myTask_Run+0x91c>)
 8000f60:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <myTask_Run+0x91c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6c:	482b      	ldr	r0, [pc, #172]	; (800101c <myTask_Run+0x920>)
 8000f6e:	f001 fc06 	bl	800277e <HAL_GPIO_WritePin>
			ledLoading(toggle);
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <myTask_Run+0x91c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	f083 0301 	eor.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	4827      	ldr	r0, [pc, #156]	; (8001020 <myTask_Run+0x924>)
 8000f84:	f001 fbfb 	bl	800277e <HAL_GPIO_WritePin>
			i++;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <myTask_Run+0x918>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <myTask_Run+0x918>)
 8000f94:	701a      	strb	r2, [r3, #0]
		}

		/* goto next state after blinky	*/
		if(i>=8){
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <myTask_Run+0x918>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	f240 80e1 	bls.w	8001164 <myTask_Run+0xa68>
			led500(1);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <myTask_Run+0x924>)
 8000fa8:	f001 fbe9 	bl	800277e <HAL_GPIO_WritePin>
			buzzer(1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <myTask_Run+0x920>)
 8000fb4:	f001 fbe3 	bl	800277e <HAL_GPIO_WritePin>
			if(++delay > 500){
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <myTask_Run+0x914>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <myTask_Run+0x914>)
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	8011      	strh	r1, [r2, #0]
 8000fc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fcc:	f240 80ca 	bls.w	8001164 <myTask_Run+0xa68>
				i=0;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <myTask_Run+0x918>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
				led500(0);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <myTask_Run+0x924>)
 8000fdc:	f001 fbcf 	bl	800277e <HAL_GPIO_WritePin>
				buzzer(0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <myTask_Run+0x920>)
 8000fe8:	f001 fbc9 	bl	800277e <HAL_GPIO_WritePin>
				delay=0;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <myTask_Run+0x914>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000ff2:	f7ff fb57 	bl	80006a4 <myLCD_clear>
				printEn=1;
 8000ff6:	4b03      	ldr	r3, [pc, #12]	; (8001004 <myTask_Run+0x908>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
				myState=ready;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <myTask_Run+0x928>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8001002:	e0af      	b.n	8001164 <myTask_Run+0xa68>
 8001004:	2000009a 	.word	0x2000009a
 8001008:	08004144 	.word	0x08004144
 800100c:	08004150 	.word	0x08004150
 8001010:	20000094 	.word	0x20000094
 8001014:	20000098 	.word	0x20000098
 8001018:	20000099 	.word	0x20000099
 800101c:	40010800 	.word	0x40010800
 8001020:	40010c00 	.word	0x40010c00
 8001024:	2000016c 	.word	0x2000016c
 8001028:	20000096 	.word	0x20000096
 800102c:	08004120 	.word	0x08004120
 8001030:	08004134 	.word	0x08004134

	case k1000:{
		/* Money overflow	*/
		if(money==2000){
 8001034:	4b4e      	ldr	r3, [pc, #312]	; (8001170 <myTask_Run+0xa74>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800103e:	d115      	bne.n	800106c <myTask_Run+0x970>
			money-=1000;		//1000 refunded
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <myTask_Run+0xa74>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b48      	ldr	r3, [pc, #288]	; (8001170 <myTask_Run+0xa74>)
 800104e:	801a      	strh	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8001050:	2100      	movs	r1, #0
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fada 	bl	800060c <myLCD_setCursor>
 8001058:	4846      	ldr	r0, [pc, #280]	; (8001174 <myTask_Run+0xa78>)
 800105a:	f7ff faf5 	bl	8000648 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 800105e:	2101      	movs	r1, #1
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fad3 	bl	800060c <myLCD_setCursor>
 8001066:	4844      	ldr	r0, [pc, #272]	; (8001178 <myTask_Run+0xa7c>)
 8001068:	f7ff faee 	bl	8000648 <myLCD_print>
		}

		/* Blinky LED and buzzer beep	*/
		if((++delay > 200) && (i<=9)){
 800106c:	4b43      	ldr	r3, [pc, #268]	; (800117c <myTask_Run+0xa80>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	3301      	adds	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <myTask_Run+0xa80>)
 8001078:	4619      	mov	r1, r3
 800107a:	8011      	strh	r1, [r2, #0]
 800107c:	2bc8      	cmp	r3, #200	; 0xc8
 800107e:	d930      	bls.n	80010e2 <myTask_Run+0x9e6>
 8001080:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <myTask_Run+0xa84>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b09      	cmp	r3, #9
 8001088:	d82b      	bhi.n	80010e2 <myTask_Run+0x9e6>
			delay=0;
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <myTask_Run+0xa80>)
 800108c:	2200      	movs	r2, #0
 800108e:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8001090:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <myTask_Run+0xa88>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <myTask_Run+0xa88>)
 80010ac:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <myTask_Run+0xa88>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b8:	4833      	ldr	r0, [pc, #204]	; (8001188 <myTask_Run+0xa8c>)
 80010ba:	f001 fb60 	bl	800277e <HAL_GPIO_WritePin>
			ledLoading(toggle);
 80010be:	4b31      	ldr	r3, [pc, #196]	; (8001184 <myTask_Run+0xa88>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f083 0301 	eor.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ce:	482f      	ldr	r0, [pc, #188]	; (800118c <myTask_Run+0xa90>)
 80010d0:	f001 fb55 	bl	800277e <HAL_GPIO_WritePin>
			i++;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <myTask_Run+0xa84>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <myTask_Run+0xa84>)
 80010e0:	701a      	strb	r2, [r3, #0]
		}

		/* goto next state after blinky	*/
		if(i>=8){
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <myTask_Run+0xa84>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d93d      	bls.n	8001168 <myTask_Run+0xa6c>
			led1000(1);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2102      	movs	r1, #2
 80010f0:	4826      	ldr	r0, [pc, #152]	; (800118c <myTask_Run+0xa90>)
 80010f2:	f001 fb44 	bl	800277e <HAL_GPIO_WritePin>
			buzzer(1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <myTask_Run+0xa8c>)
 80010fe:	f001 fb3e 	bl	800277e <HAL_GPIO_WritePin>
			if(++delay > 2000){
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <myTask_Run+0xa80>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	3301      	adds	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <myTask_Run+0xa80>)
 800110e:	4619      	mov	r1, r3
 8001110:	8011      	strh	r1, [r2, #0]
 8001112:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001116:	d927      	bls.n	8001168 <myTask_Run+0xa6c>
				i=0;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <myTask_Run+0xa84>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
				led1000(0);
 800111e:	2201      	movs	r2, #1
 8001120:	2102      	movs	r1, #2
 8001122:	481a      	ldr	r0, [pc, #104]	; (800118c <myTask_Run+0xa90>)
 8001124:	f001 fb2b 	bl	800277e <HAL_GPIO_WritePin>
				buzzer(0);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <myTask_Run+0xa8c>)
 8001130:	f001 fb25 	bl	800277e <HAL_GPIO_WritePin>
				delay=0;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <myTask_Run+0xa80>)
 8001136:	2200      	movs	r2, #0
 8001138:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 800113a:	f7ff fab3 	bl	80006a4 <myLCD_clear>
				printEn=1;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <myTask_Run+0xa94>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
				myState=ready;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <myTask_Run+0xa98>)
 8001146:	2204      	movs	r2, #4
 8001148:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 800114a:	e00d      	b.n	8001168 <myTask_Run+0xa6c>
	}break;
 800114c:	bf00      	nop
 800114e:	e00c      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 8001150:	bf00      	nop
 8001152:	e00a      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 8001154:	bf00      	nop
 8001156:	e008      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 8001158:	bf00      	nop
 800115a:	e006      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 800115c:	bf00      	nop
 800115e:	e004      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 8001160:	bf00      	nop
 8001162:	e002      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 8001164:	bf00      	nop
 8001166:	e000      	b.n	800116a <myTask_Run+0xa6e>
	}break;
 8001168:	bf00      	nop
	}
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000096 	.word	0x20000096
 8001174:	08004120 	.word	0x08004120
 8001178:	0800413c 	.word	0x0800413c
 800117c:	20000094 	.word	0x20000094
 8001180:	20000098 	.word	0x20000098
 8001184:	20000099 	.word	0x20000099
 8001188:	40010800 	.word	0x40010800
 800118c:	40010c00 	.word	0x40010c00
 8001190:	2000009a 	.word	0x2000009a
 8001194:	2000016c 	.word	0x2000016c

08001198 <PB_Process>:


/* ---------------------------------------------------------------------------------------- */
_Bool PB_Process(void){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_PROCESS_GPIO_Port, PB_PROCESS_Pin)==0)
 80011a2:	2110      	movs	r1, #16
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <PB_Process+0x58>)
 80011a6:	f001 fad3 	bl	8002750 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d107      	bne.n	80011c0 <PB_Process+0x28>
		debounce1 = debounce1<<1;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <PB_Process+0x5c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <PB_Process+0x5c>)
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	e00a      	b.n	80011d6 <PB_Process+0x3e>
	else
		debounce1 = (debounce1<<1)|1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <PB_Process+0x5c>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <PB_Process+0x5c>)
 80011d4:	801a      	strh	r2, [r3, #0]
	if(debounce1==3)
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <PB_Process+0x5c>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d101      	bne.n	80011e4 <PB_Process+0x4c>
		flagDetect=1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40010800 	.word	0x40010800
 80011f4:	20000000 	.word	0x20000000

080011f8 <PB_Cancel>:

_Bool PB_Cancel(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_CANCEL_GPIO_Port, PB_CANCEL_Pin)==0)
 8001202:	2120      	movs	r1, #32
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <PB_Cancel+0x58>)
 8001206:	f001 faa3 	bl	8002750 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <PB_Cancel+0x28>
		debounce2 = debounce2<<1;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <PB_Cancel+0x5c>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <PB_Cancel+0x5c>)
 800121c:	801a      	strh	r2, [r3, #0]
 800121e:	e00a      	b.n	8001236 <PB_Cancel+0x3e>
	else
		debounce2 = (debounce2<<1)|1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <PB_Cancel+0x5c>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b21b      	sxth	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b21b      	sxth	r3, r3
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <PB_Cancel+0x5c>)
 8001234:	801a      	strh	r2, [r3, #0]
	if(debounce2==3)
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <PB_Cancel+0x5c>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d101      	bne.n	8001244 <PB_Cancel+0x4c>
		flagDetect=1;
 8001240:	2301      	movs	r3, #1
 8001242:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8001244:	79fb      	ldrb	r3, [r7, #7]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010800 	.word	0x40010800
 8001254:	20000002 	.word	0x20000002

08001258 <Detect_1000>:
//	if(debounce4==3)
//		flagDetect=1;
//	return flagDetect;
//}

_Bool Detect_1000(void){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 800125e:	2300      	movs	r3, #0
 8001260:	71fb      	strb	r3, [r7, #7]
	if((myADC_read() > 300) && (myADC_read() < 2700))
 8001262:	f7ff f911 	bl	8000488 <myADC_read>
 8001266:	4603      	mov	r3, r0
 8001268:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800126c:	d90e      	bls.n	800128c <Detect_1000+0x34>
 800126e:	f7ff f90b 	bl	8000488 <myADC_read>
 8001272:	4602      	mov	r2, r0
 8001274:	f640 238b 	movw	r3, #2699	; 0xa8b
 8001278:	429a      	cmp	r2, r3
 800127a:	d807      	bhi.n	800128c <Detect_1000+0x34>
		debounce3 = debounce3<<1;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <Detect_1000+0x64>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <Detect_1000+0x64>)
 8001288:	801a      	strh	r2, [r3, #0]
 800128a:	e00a      	b.n	80012a2 <Detect_1000+0x4a>
	else
		debounce3 = (debounce3<<1)|1;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <Detect_1000+0x64>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	b21b      	sxth	r3, r3
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	b21b      	sxth	r3, r3
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <Detect_1000+0x64>)
 80012a0:	801a      	strh	r2, [r3, #0]
	if(debounce3==3)
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <Detect_1000+0x64>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d101      	bne.n	80012b0 <Detect_1000+0x58>
		flagDetect=1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000004 	.word	0x20000004

080012c0 <Detect_500>:

_Bool Detect_500(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
	if(myADC_read() > 3000)
 80012ca:	f7ff f8dd 	bl	8000488 <myADC_read>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d907      	bls.n	80012e8 <Detect_500+0x28>
		debounce4 = debounce4<<1;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <Detect_500+0x58>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <Detect_500+0x58>)
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e00a      	b.n	80012fe <Detect_500+0x3e>
	else
		debounce4 = (debounce4<<1)|1;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <Detect_500+0x58>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <Detect_500+0x58>)
 80012fc:	801a      	strh	r2, [r3, #0]
	if(debounce4==3)
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <Detect_500+0x58>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d101      	bne.n	800130c <Detect_500+0x4c>
		flagDetect=1;
 8001308:	2301      	movs	r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 800130c:	79fb      	ldrb	r3, [r7, #7]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000006 	.word	0x20000006

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_MspInit+0x5c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_MspInit+0x5c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_MspInit+0x5c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_MspInit+0x60>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_MspInit+0x60>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_ADC_MspInit+0xbc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d149      	bne.n	8001434 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a20      	ldr	r2, [pc, #128]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d0:	2301      	movs	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	2303      	movs	r3, #3
 80013d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4819      	ldr	r0, [pc, #100]	; (8001444 <HAL_ADC_MspInit+0xc4>)
 80013e0:	f001 f85c 	bl	800249c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_ADC_MspInit+0xcc>)
 80013e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 80013fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001402:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 8001406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 800140e:	2220      	movs	r2, #32
 8001410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 800141a:	f000 fe51 	bl	80020c0 <HAL_DMA_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001424:	f7fe ffde 	bl	80003e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 800142c:	621a      	str	r2, [r3, #32]
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_ADC_MspInit+0xc8>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40012400 	.word	0x40012400
 8001440:	40021000 	.word	0x40021000
 8001444:	40010800 	.word	0x40010800
 8001448:	200000e4 	.word	0x200000e4
 800144c:	40020008 	.word	0x40020008

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d113      	bne.n	800148a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_TIM_Base_MspInit+0x44>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_TIM_Base_MspInit+0x44>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_TIM_Base_MspInit+0x44>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	201c      	movs	r0, #28
 8001480:	f000 fde7 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001484:	201c      	movs	r0, #28
 8001486:	f000 fe00 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <HardFault_Handler+0x4>

080014aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <MemManage_Handler+0x4>

080014b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <BusFault_Handler+0x4>

080014b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <UsageFault_Handler+0x4>

080014bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f8e4 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA1_Channel1_IRQHandler+0x10>)
 80014f2:	f000 fe9f 	bl	8002234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000e4 	.word	0x200000e4

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <TIM2_IRQHandler+0x14>)
 8001506:	f001 fe41 	bl	800318c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  myTask_Run();
 800150a:	f7ff f8f7 	bl	80006fc <myTask_Run>
  /* USER CODE END TIM2_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000128 	.word	0x20000128

08001518 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <_sbrk+0x50>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x16>
		heap_end = &end;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <_sbrk+0x50>)
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <_sbrk+0x54>)
 800152c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <_sbrk+0x50>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <_sbrk+0x50>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	466a      	mov	r2, sp
 800153e:	4293      	cmp	r3, r2
 8001540:	d907      	bls.n	8001552 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001542:	f002 f95d 	bl	8003800 <__errno>
 8001546:	4602      	mov	r2, r0
 8001548:	230c      	movs	r3, #12
 800154a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e006      	b.n	8001560 <_sbrk+0x48>
	}

	heap_end += incr;
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <_sbrk+0x50>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a03      	ldr	r2, [pc, #12]	; (8001568 <_sbrk+0x50>)
 800155c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000009c 	.word	0x2000009c
 800156c:	20000180 	.word	0x20000180

08001570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <SystemInit+0x5c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <SystemInit+0x5c>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <SystemInit+0x5c>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4911      	ldr	r1, [pc, #68]	; (80015cc <SystemInit+0x5c>)
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <SystemInit+0x60>)
 8001588:	4013      	ands	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <SystemInit+0x5c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <SystemInit+0x5c>)
 8001592:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <SystemInit+0x5c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SystemInit+0x5c>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <SystemInit+0x5c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <SystemInit+0x5c>)
 80015ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SystemInit+0x5c>)
 80015b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SystemInit+0x64>)
 80015be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	f8ff0000 	.word	0xf8ff0000
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015da:	e003      	b.n	80015e4 <LoopCopyDataInit>

080015dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015e2:	3104      	adds	r1, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015ec:	d3f6      	bcc.n	80015dc <CopyDataInit>
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f0:	e002      	b.n	80015f8 <LoopFillZerobss>

080015f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015f4:	f842 3b04 	str.w	r3, [r2], #4

080015f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015fc:	d3f9      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015fe:	f7ff ffb7 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001602:	f002 f903 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7fe fda1 	bl	800014c <main>
  bx lr
 800160a:	4770      	bx	lr
  ldr r3, =_sidata
 800160c:	080041c0 	.word	0x080041c0
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001614:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001618:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800161c:	2000017c 	.word	0x2000017c

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x28>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fd01 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fe6c 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fd19 	bl	80020a6 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 fce1 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000010 	.word	0x20000010
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000010 	.word	0x20000010
 80016d0:	20000174 	.word	0x20000174

080016d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_GetTick+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000174 	.word	0x20000174

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff fff0 	bl	80016d4 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_Delay+0x40>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffe0 	bl	80016d4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000010 	.word	0x20000010

0800172c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0be      	b.n	80018cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe08 	bl	8001380 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 faf7 	bl	8001d64 <ADC_ConversionStop_Disable>
 8001776:	4603      	mov	r3, r0
 8001778:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 8099 	bne.w	80018ba <HAL_ADC_Init+0x18e>
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 8095 	bne.w	80018ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001798:	f023 0302 	bic.w	r3, r3, #2
 800179c:	f043 0202 	orr.w	r2, r3, #2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7b1b      	ldrb	r3, [r3, #12]
 80017b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_Init+0xa2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <HAL_ADC_Init+0xa8>
 80017ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d2:	e000      	b.n	80017d6 <HAL_ADC_Init+0xaa>
 80017d4:	2300      	movs	r3, #0
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7d1b      	ldrb	r3, [r3, #20]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d119      	bne.n	8001818 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	035a      	lsls	r2, r3, #13
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	e00b      	b.n	8001818 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_ADC_Init+0x1a8>)
 8001834:	4013      	ands	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	430b      	orrs	r3, r1
 800183e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001848:	d003      	beq.n	8001852 <HAL_ADC_Init+0x126>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d104      	bne.n	800185c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	3b01      	subs	r3, #1
 8001858:	051b      	lsls	r3, r3, #20
 800185a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	430a      	orrs	r2, r1
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_ADC_Init+0x1ac>)
 8001878:	4013      	ands	r3, r2
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	429a      	cmp	r2, r3
 800187e:	d10b      	bne.n	8001898 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001896:	e018      	b.n	80018ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	f023 0312 	bic.w	r3, r3, #18
 80018a0:	f043 0210 	orr.w	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018b8:	e007      	b.n	80018ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f043 0210 	orr.w	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	ffe1f7fd 	.word	0xffe1f7fd
 80018d8:	ff1f0efe 	.word	0xff1f0efe

080018dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a64      	ldr	r2, [pc, #400]	; (8001a84 <HAL_ADC_Start_DMA+0x1a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_ADC_Start_DMA+0x24>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a63      	ldr	r2, [pc, #396]	; (8001a88 <HAL_ADC_Start_DMA+0x1ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Start_DMA+0x32>
 8001900:	4b60      	ldr	r3, [pc, #384]	; (8001a84 <HAL_ADC_Start_DMA+0x1a8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 80b3 	bne.w	8001a74 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_Start_DMA+0x40>
 8001918:	2302      	movs	r3, #2
 800191a:	e0ae      	b.n	8001a7a <HAL_ADC_Start_DMA+0x19e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f9cb 	bl	8001cc0 <ADC_Enable>
 800192a:	4603      	mov	r3, r0
 800192c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 809a 	bne.w	8001a6a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_ADC_Start_DMA+0x1ac>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d105      	bne.n	8001960 <HAL_ADC_Start_DMA+0x84>
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <HAL_ADC_Start_DMA+0x1a8>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d115      	bne.n	800198c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	d026      	beq.n	80019c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001982:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800198a:	e01d      	b.n	80019c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a39      	ldr	r2, [pc, #228]	; (8001a84 <HAL_ADC_Start_DMA+0x1a8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_ADC_Start_DMA+0xd0>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_ADC_Start_DMA+0x1ac>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d10d      	bne.n	80019c8 <HAL_ADC_Start_DMA+0xec>
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_ADC_Start_DMA+0x1a8>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f023 0206 	bic.w	r2, r3, #6
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <HAL_ADC_Start_DMA+0x1b0>)
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <HAL_ADC_Start_DMA+0x1b4>)
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_ADC_Start_DMA+0x1b8>)
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0202 	mvn.w	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a20:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a18      	ldr	r0, [r3, #32]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	334c      	adds	r3, #76	; 0x4c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f000 fb9f 	bl	8002174 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a44:	d108      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a54:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a56:	e00f      	b.n	8001a78 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a66:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a68:	e006      	b.n	8001a78 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a72:	e001      	b.n	8001a78 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40012400 	.word	0x40012400
 8001a88:	40012800 	.word	0x40012800
 8001a8c:	08001dd9 	.word	0x08001dd9
 8001a90:	08001e55 	.word	0x08001e55
 8001a94:	08001e71 	.word	0x08001e71

08001a98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x20>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0dc      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1da>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d81c      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b05      	subs	r3, #5
 8001b12:	221f      	movs	r2, #31
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b05      	subs	r3, #5
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
 8001b38:	e03c      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d81c      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b23      	subs	r3, #35	; 0x23
 8001b54:	221f      	movs	r2, #31
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4019      	ands	r1, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b23      	subs	r3, #35	; 0x23
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7a:	e01b      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b41      	subs	r3, #65	; 0x41
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b41      	subs	r3, #65	; 0x41
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d91c      	bls.n	8001bf6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b1e      	subs	r3, #30
 8001bce:	2207      	movs	r2, #7
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6898      	ldr	r0, [r3, #8]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3b1e      	subs	r3, #30
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	e019      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6919      	ldr	r1, [r3, #16]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	2207      	movs	r2, #7
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4019      	ands	r1, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6898      	ldr	r0, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d003      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d132      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d125      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d126      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c60:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d11a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_ADC_ConfigChannel+0x1ec>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9a      	lsrs	r2, r3, #18
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f9      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x1b2>
 8001c8e:	e007      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40012400 	.word	0x40012400
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d039      	beq.n	8001d52 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <ADC_Enable+0x9c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <ADC_Enable+0xa0>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	0c9b      	lsrs	r3, r3, #18
 8001cfa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cfc:	e002      	b.n	8001d04 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d0a:	f7ff fce3 	bl	80016d4 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d10:	e018      	b.n	8001d44 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d12:	f7ff fcdf 	bl	80016d4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d911      	bls.n	8001d44 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e007      	b.n	8001d54 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d1df      	bne.n	8001d12 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	431bde83 	.word	0x431bde83

08001d64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d127      	bne.n	8001dce <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d8e:	f7ff fca1 	bl	80016d4 <HAL_GetTick>
 8001d92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d94:	e014      	b.n	8001dc0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d96:	f7ff fc9d 	bl	80016d4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d90d      	bls.n	8001dc0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f043 0210 	orr.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e007      	b.n	8001dd0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d0e3      	beq.n	8001d96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d127      	bne.n	8001e42 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e08:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e0c:	d115      	bne.n	8001e3a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d111      	bne.n	8001e3a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff fe2c 	bl	8001a98 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e40:	e004      	b.n	8001e4c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff fe21 	bl	8001aaa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f043 0204 	orr.w	r2, r3, #4
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff fe10 	bl	8001abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <__NVIC_EnableIRQ+0x34>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff90 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff2d 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff42 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff90 	bl	8001f94 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5f 	bl	8001f40 <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff35 	bl	8001f08 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e043      	b.n	800215e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_DMA_Init+0xa8>)
 80020de:	4413      	add	r3, r2
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_DMA_Init+0xac>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_DMA_Init+0xb0>)
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800210a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800210e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	bffdfff8 	.word	0xbffdfff8
 800216c:	cccccccd 	.word	0xcccccccd
 8002170:	40020000 	.word	0x40020000

08002174 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_DMA_Start_IT+0x20>
 8002190:	2302      	movs	r3, #2
 8002192:	e04a      	b.n	800222a <HAL_DMA_Start_IT+0xb6>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d13a      	bne.n	800221c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f938 	bl	8002440 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 020e 	orr.w	r2, r2, #14
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e00f      	b.n	800220a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 020a 	orr.w	r2, r2, #10
 8002208:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e005      	b.n	8002228 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002224:	2302      	movs	r3, #2
 8002226:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2204      	movs	r2, #4
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d04f      	beq.n	80022fc <HAL_DMA_IRQHandler+0xc8>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04a      	beq.n	80022fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a66      	ldr	r2, [pc, #408]	; (8002424 <HAL_DMA_IRQHandler+0x1f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d029      	beq.n	80022e2 <HAL_DMA_IRQHandler+0xae>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_DMA_IRQHandler+0x1f4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <HAL_DMA_IRQHandler+0xaa>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a63      	ldr	r2, [pc, #396]	; (800242c <HAL_DMA_IRQHandler+0x1f8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01a      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xa4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a62      	ldr	r2, [pc, #392]	; (8002430 <HAL_DMA_IRQHandler+0x1fc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d012      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x9e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a60      	ldr	r2, [pc, #384]	; (8002434 <HAL_DMA_IRQHandler+0x200>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00a      	beq.n	80022cc <HAL_DMA_IRQHandler+0x98>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5f      	ldr	r2, [pc, #380]	; (8002438 <HAL_DMA_IRQHandler+0x204>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d102      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x92>
 80022c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022c4:	e00e      	b.n	80022e4 <HAL_DMA_IRQHandler+0xb0>
 80022c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ca:	e00b      	b.n	80022e4 <HAL_DMA_IRQHandler+0xb0>
 80022cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022d0:	e008      	b.n	80022e4 <HAL_DMA_IRQHandler+0xb0>
 80022d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d6:	e005      	b.n	80022e4 <HAL_DMA_IRQHandler+0xb0>
 80022d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022dc:	e002      	b.n	80022e4 <HAL_DMA_IRQHandler+0xb0>
 80022de:	2340      	movs	r3, #64	; 0x40
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_IRQHandler+0xb0>
 80022e2:	2304      	movs	r3, #4
 80022e4:	4a55      	ldr	r2, [pc, #340]	; (800243c <HAL_DMA_IRQHandler+0x208>)
 80022e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8094 	beq.w	800241a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022fa:	e08e      	b.n	800241a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2202      	movs	r2, #2
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d056      	beq.n	80023ba <HAL_DMA_IRQHandler+0x186>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d051      	beq.n	80023ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020a 	bic.w	r2, r2, #10
 8002332:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_DMA_IRQHandler+0x1f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d029      	beq.n	800239a <HAL_DMA_IRQHandler+0x166>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a37      	ldr	r2, [pc, #220]	; (8002428 <HAL_DMA_IRQHandler+0x1f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0x162>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a35      	ldr	r2, [pc, #212]	; (800242c <HAL_DMA_IRQHandler+0x1f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01a      	beq.n	8002390 <HAL_DMA_IRQHandler+0x15c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a34      	ldr	r2, [pc, #208]	; (8002430 <HAL_DMA_IRQHandler+0x1fc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_IRQHandler+0x156>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a32      	ldr	r2, [pc, #200]	; (8002434 <HAL_DMA_IRQHandler+0x200>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x150>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a31      	ldr	r2, [pc, #196]	; (8002438 <HAL_DMA_IRQHandler+0x204>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_DMA_IRQHandler+0x14a>
 8002378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800237c:	e00e      	b.n	800239c <HAL_DMA_IRQHandler+0x168>
 800237e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002382:	e00b      	b.n	800239c <HAL_DMA_IRQHandler+0x168>
 8002384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002388:	e008      	b.n	800239c <HAL_DMA_IRQHandler+0x168>
 800238a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238e:	e005      	b.n	800239c <HAL_DMA_IRQHandler+0x168>
 8002390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002394:	e002      	b.n	800239c <HAL_DMA_IRQHandler+0x168>
 8002396:	2320      	movs	r3, #32
 8002398:	e000      	b.n	800239c <HAL_DMA_IRQHandler+0x168>
 800239a:	2302      	movs	r3, #2
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_DMA_IRQHandler+0x208>)
 800239e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d034      	beq.n	800241a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023b8:	e02f      	b.n	800241a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2208      	movs	r2, #8
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d028      	beq.n	800241c <HAL_DMA_IRQHandler+0x1e8>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 020e 	bic.w	r2, r2, #14
 80023e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
    }
  }
  return;
 800241a:	bf00      	nop
 800241c:	bf00      	nop
}
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40020008 	.word	0x40020008
 8002428:	4002001c 	.word	0x4002001c
 800242c:	40020030 	.word	0x40020030
 8002430:	40020044 	.word	0x40020044
 8002434:	40020058 	.word	0x40020058
 8002438:	4002006c 	.word	0x4002006c
 800243c:	40020000 	.word	0x40020000

08002440 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d108      	bne.n	8002480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800247e:	e007      	b.n	8002490 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b08b      	sub	sp, #44	; 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ae:	e127      	b.n	8002700 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b0:	2201      	movs	r2, #1
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8116 	bne.w	80026fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d034      	beq.n	8002540 <HAL_GPIO_Init+0xa4>
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d80d      	bhi.n	80024f6 <HAL_GPIO_Init+0x5a>
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d02b      	beq.n	8002536 <HAL_GPIO_Init+0x9a>
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d804      	bhi.n	80024ec <HAL_GPIO_Init+0x50>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d031      	beq.n	800254a <HAL_GPIO_Init+0xae>
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d01c      	beq.n	8002524 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ea:	e048      	b.n	800257e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d043      	beq.n	8002578 <HAL_GPIO_Init+0xdc>
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d01b      	beq.n	800252c <HAL_GPIO_Init+0x90>
          break;
 80024f4:	e043      	b.n	800257e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024f6:	4a89      	ldr	r2, [pc, #548]	; (800271c <HAL_GPIO_Init+0x280>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d026      	beq.n	800254a <HAL_GPIO_Init+0xae>
 80024fc:	4a87      	ldr	r2, [pc, #540]	; (800271c <HAL_GPIO_Init+0x280>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d806      	bhi.n	8002510 <HAL_GPIO_Init+0x74>
 8002502:	4a87      	ldr	r2, [pc, #540]	; (8002720 <HAL_GPIO_Init+0x284>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d020      	beq.n	800254a <HAL_GPIO_Init+0xae>
 8002508:	4a86      	ldr	r2, [pc, #536]	; (8002724 <HAL_GPIO_Init+0x288>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_GPIO_Init+0xae>
          break;
 800250e:	e036      	b.n	800257e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002510:	4a85      	ldr	r2, [pc, #532]	; (8002728 <HAL_GPIO_Init+0x28c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0xae>
 8002516:	4a85      	ldr	r2, [pc, #532]	; (800272c <HAL_GPIO_Init+0x290>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d016      	beq.n	800254a <HAL_GPIO_Init+0xae>
 800251c:	4a84      	ldr	r2, [pc, #528]	; (8002730 <HAL_GPIO_Init+0x294>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0xae>
          break;
 8002522:	e02c      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e028      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	3304      	adds	r3, #4
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e023      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	3308      	adds	r3, #8
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e01e      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	330c      	adds	r3, #12
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e019      	b.n	800257e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002552:	2304      	movs	r3, #4
 8002554:	623b      	str	r3, [r7, #32]
          break;
 8002556:	e012      	b.n	800257e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002560:	2308      	movs	r3, #8
 8002562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	611a      	str	r2, [r3, #16]
          break;
 800256a:	e008      	b.n	800257e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800256c:	2308      	movs	r3, #8
 800256e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	615a      	str	r2, [r3, #20]
          break;
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2bff      	cmp	r3, #255	; 0xff
 8002582:	d801      	bhi.n	8002588 <HAL_GPIO_Init+0xec>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	e001      	b.n	800258c <HAL_GPIO_Init+0xf0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2bff      	cmp	r3, #255	; 0xff
 8002592:	d802      	bhi.n	800259a <HAL_GPIO_Init+0xfe>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x104>
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3b08      	subs	r3, #8
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	210f      	movs	r1, #15
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	6a39      	ldr	r1, [r7, #32]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8096 	beq.w	80026fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ce:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_GPIO_Init+0x298>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x298>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6193      	str	r3, [r2, #24]
 80025da:	4b56      	ldr	r3, [pc, #344]	; (8002734 <HAL_GPIO_Init+0x298>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e6:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_GPIO_Init+0x29c>)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_GPIO_Init+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x19e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_GPIO_Init+0x2a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x19a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <HAL_GPIO_Init+0x2a8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x196>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a48      	ldr	r2, [pc, #288]	; (8002748 <HAL_GPIO_Init+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x192>
 800262a:	2303      	movs	r3, #3
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 800262e:	2304      	movs	r3, #4
 8002630:	e004      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 8002632:	2302      	movs	r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 800263a:	2300      	movs	r3, #0
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	f002 0203 	and.w	r2, r2, #3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4093      	lsls	r3, r2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800264c:	493a      	ldr	r1, [pc, #232]	; (8002738 <HAL_GPIO_Init+0x29c>)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4938      	ldr	r1, [pc, #224]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
 8002672:	e006      	b.n	8002682 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4933      	ldr	r1, [pc, #204]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	492e      	ldr	r1, [pc, #184]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4929      	ldr	r1, [pc, #164]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b6:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4924      	ldr	r1, [pc, #144]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
 80026c2:	e006      	b.n	80026d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	491f      	ldr	r1, [pc, #124]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	491a      	ldr	r1, [pc, #104]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60cb      	str	r3, [r1, #12]
 80026ea:	e006      	b.n	80026fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4915      	ldr	r1, [pc, #84]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	3301      	adds	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	f47f aed0 	bne.w	80024b0 <HAL_GPIO_Init+0x14>
  }
}
 8002710:	bf00      	nop
 8002712:	372c      	adds	r7, #44	; 0x2c
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	10210000 	.word	0x10210000
 8002720:	10110000 	.word	0x10110000
 8002724:	10120000 	.word	0x10120000
 8002728:	10310000 	.word	0x10310000
 800272c:	10320000 	.word	0x10320000
 8002730:	10220000 	.word	0x10220000
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	40010800 	.word	0x40010800
 8002740:	40010c00 	.word	0x40010c00
 8002744:	40011000 	.word	0x40011000
 8002748:	40011400 	.word	0x40011400
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]
 800278a:	4613      	mov	r3, r2
 800278c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800278e:	787b      	ldrb	r3, [r7, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800279a:	e003      	b.n	80027a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	041a      	lsls	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	611a      	str	r2, [r3, #16]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e26c      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8087 	beq.w	80028de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027dc:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d112      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
 80027e8:	4b8c      	ldr	r3, [pc, #560]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <HAL_RCC_OscConfig+0x12c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d168      	bne.n	80028dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e246      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x76>
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x98>
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7a      	ldr	r2, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0xbc>
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a67      	ldr	r2, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe ff22 	bl	80016d4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe ff1e 	bl	80016d4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e1fa      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xe4>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe ff0e 	bl	80016d4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe ff0a 	bl	80016d4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1e6      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x10c>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ea:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
 8002902:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1ba      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fec3 	bl	80016d4 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe febf 	bl	80016d4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e19b      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fea2 	bl	80016d4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fe9e 	bl	80016d4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e17a      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03a      	beq.n	8002a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fe82 	bl	80016d4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fe7e 	bl	80016d4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e15a      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f000 faa8 	bl	8002f48 <RCC_Delay>
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fe68 	bl	80016d4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e00f      	b.n	8002a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fe64 	bl	80016d4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d908      	bls.n	8002a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e140      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	42420000 	.word	0x42420000
 8002a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b9e      	ldr	r3, [pc, #632]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e9      	bne.n	8002a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a6 	beq.w	8002b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b97      	ldr	r3, [pc, #604]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b94      	ldr	r3, [pc, #592]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a93      	ldr	r2, [pc, #588]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	61d3      	str	r3, [r2, #28]
 8002a5e:	4b91      	ldr	r3, [pc, #580]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a8a      	ldr	r2, [pc, #552]	; (8002ca8 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fe25 	bl	80016d4 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe fe21 	bl	80016d4 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0fd      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b81      	ldr	r3, [pc, #516]	; (8002ca8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x312>
 8002ab4:	4b7b      	ldr	r3, [pc, #492]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e02d      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x334>
 8002aca:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a75      	ldr	r2, [pc, #468]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a72      	ldr	r2, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x356>
 8002aec:	4b6d      	ldr	r3, [pc, #436]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a6c      	ldr	r2, [pc, #432]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a69      	ldr	r2, [pc, #420]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a66      	ldr	r2, [pc, #408]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a63      	ldr	r2, [pc, #396]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fdd5 	bl	80016d4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fdd1 	bl	80016d4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0ab      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x37e>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fdbf 	bl	80016d4 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fdbb 	bl	80016d4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e095      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4a47      	ldr	r2, [pc, #284]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8081 	beq.w	8002c9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d061      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d146      	bne.n	8002c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_RCC_OscConfig+0x4fc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fd8f 	bl	80016d4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fd8b 	bl	80016d4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e067      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	492d      	ldr	r1, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a19      	ldr	r1, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	430b      	orrs	r3, r1
 8002c06:	4927      	ldr	r1, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x4fc>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fd5f 	bl	80016d4 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fd5b 	bl	80016d4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e037      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46a>
 8002c38:	e02f      	b.n	8002c9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_RCC_OscConfig+0x4fc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fd48 	bl	80016d4 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fd44 	bl	80016d4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e020      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x498>
 8002c66:	e018      	b.n	8002c9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e013      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	42420060 	.word	0x42420060

08002cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0d0      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	4965      	ldr	r1, [pc, #404]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0b8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d040      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e073      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06b      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4936      	ldr	r1, [pc, #216]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fc98 	bl	80016d4 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe fc94 	bl	80016d4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e053      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d210      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	4922      	ldr	r1, [pc, #136]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e032      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4916      	ldr	r1, [pc, #88]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e3e:	f000 f821 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e42:	4601      	mov	r1, r0
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	fa21 f303 	lsr.w	r3, r1, r3
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_RCC_ClockConfig+0x1cc>)
 8002e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1d0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fbf6 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08004174 	.word	0x08004174
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b490      	push	{r4, r7}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e8c:	1d3c      	adds	r4, r7, #4
 8002e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x46>
 8002ec2:	e02d      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ec6:	623b      	str	r3, [r7, #32]
      break;
 8002ec8:	e02d      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	0c9b      	lsrs	r3, r3, #18
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002edc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c5b      	lsrs	r3, r3, #17
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f02:	fb02 f203 	mul.w	r2, r2, r3
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	e004      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	623b      	str	r3, [r7, #32]
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f22:	623b      	str	r3, [r7, #32]
      break;
 8002f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc90      	pop	{r4, r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	08004160 	.word	0x08004160
 8002f38:	08004170 	.word	0x08004170
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	007a1200 	.word	0x007a1200
 8002f44:	003d0900 	.word	0x003d0900

08002f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <RCC_Delay+0x34>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <RCC_Delay+0x38>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0a5b      	lsrs	r3, r3, #9
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f64:	bf00      	nop
  }
  while (Delay --);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e5a      	subs	r2, r3, #1
 8002f6a:	60fa      	str	r2, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <RCC_Delay+0x1c>
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000008 	.word	0x20000008
 8002f80:	10624dd3 	.word	0x10624dd3

08002f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d07d      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa4:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	61d3      	str	r3, [r2, #28]
 8002fbc:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d118      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd8:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a42      	ldr	r2, [pc, #264]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fb76 	bl	80016d4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	e008      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fe fb72 	bl	80016d4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e06d      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d02e      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d027      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003028:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003030:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003032:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003038:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d014      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe fb41 	bl	80016d4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe fb3d 	bl	80016d4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e036      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ee      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4917      	ldr	r1, [pc, #92]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	4313      	orrs	r3, r2
 8003088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	490b      	ldr	r1, [pc, #44]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42420440 	.word	0x42420440

080030f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e01d      	b.n	800313e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe f99a 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fa18 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d007      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0202 	mvn.w	r2, #2
 80031b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f9ad 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9a0 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f9af 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b04      	cmp	r3, #4
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0204 	mvn.w	r2, #4
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f983 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f976 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f985 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b08      	cmp	r3, #8
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0208 	mvn.w	r2, #8
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2204      	movs	r2, #4
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f959 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f94c 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f95b 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b10      	cmp	r3, #16
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0210 	mvn.w	r2, #16
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2208      	movs	r2, #8
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f92f 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f922 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f931 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10e      	bne.n	8003310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d107      	bne.n	8003310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0201 	mvn.w	r2, #1
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8fd 	bl	800350a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003328:	2b80      	cmp	r3, #128	; 0x80
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa59 	bl	80037ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8f5 	bl	8003552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b20      	cmp	r3, #32
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0220 	mvn.w	r2, #32
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa24 	bl	80037dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_ConfigClockSource+0x18>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e0a6      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x166>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d067      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0x120>
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d80b      	bhi.n	8003408 <HAL_TIM_ConfigClockSource+0x6c>
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d073      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d802      	bhi.n	80033fe <HAL_TIM_ConfigClockSource+0x62>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d06f      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033fc:	e078      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d06c      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
 8003402:	2b30      	cmp	r3, #48	; 0x30
 8003404:	d06a      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003406:	e073      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003408:	2b70      	cmp	r3, #112	; 0x70
 800340a:	d00d      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x8c>
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d804      	bhi.n	800341a <HAL_TIM_ConfigClockSource+0x7e>
 8003410:	2b50      	cmp	r3, #80	; 0x50
 8003412:	d033      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xe0>
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d041      	beq.n	800349c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003418:	e06a      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d066      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x152>
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003424:	d017      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003426:	e063      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f000 f96d 	bl	8003716 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800344a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e04c      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f000 f956 	bl	8003716 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003478:	609a      	str	r2, [r3, #8]
      break;
 800347a:	e039      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	461a      	mov	r2, r3
 800348a:	f000 f8cd 	bl	8003628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2150      	movs	r1, #80	; 0x50
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f924 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 800349a:	e029      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f000 f8eb 	bl	8003684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2160      	movs	r1, #96	; 0x60
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f914 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034ba:	e019      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f000 f8ad 	bl	8003628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f904 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034da:	e009      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 f8fb 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <TIM_Base_SetConfig+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a18      	ldr	r2, [pc, #96]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 030a 	bic.w	r3, r3, #10
 8003664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f023 0210 	bic.w	r2, r3, #16
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	031b      	lsls	r3, r3, #12
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	021a      	lsls	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e032      	b.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <__errno>:
 8003800:	4b01      	ldr	r3, [pc, #4]	; (8003808 <__errno+0x8>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000014 	.word	0x20000014

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	2500      	movs	r5, #0
 8003810:	4e0c      	ldr	r6, [pc, #48]	; (8003844 <__libc_init_array+0x38>)
 8003812:	4c0d      	ldr	r4, [pc, #52]	; (8003848 <__libc_init_array+0x3c>)
 8003814:	1ba4      	subs	r4, r4, r6
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	42a5      	cmp	r5, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	f000 fc34 	bl	8004088 <_init>
 8003820:	2500      	movs	r5, #0
 8003822:	4e0a      	ldr	r6, [pc, #40]	; (800384c <__libc_init_array+0x40>)
 8003824:	4c0a      	ldr	r4, [pc, #40]	; (8003850 <__libc_init_array+0x44>)
 8003826:	1ba4      	subs	r4, r4, r6
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	42a5      	cmp	r5, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003834:	4798      	blx	r3
 8003836:	3501      	adds	r5, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383e:	4798      	blx	r3
 8003840:	3501      	adds	r5, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	080041b8 	.word	0x080041b8
 8003848:	080041b8 	.word	0x080041b8
 800384c:	080041b8 	.word	0x080041b8
 8003850:	080041bc 	.word	0x080041bc

08003854 <memset>:
 8003854:	4603      	mov	r3, r0
 8003856:	4402      	add	r2, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <siprintf>:
 8003864:	b40e      	push	{r1, r2, r3}
 8003866:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800386a:	b500      	push	{lr}
 800386c:	b09c      	sub	sp, #112	; 0x70
 800386e:	ab1d      	add	r3, sp, #116	; 0x74
 8003870:	9002      	str	r0, [sp, #8]
 8003872:	9006      	str	r0, [sp, #24]
 8003874:	9107      	str	r1, [sp, #28]
 8003876:	9104      	str	r1, [sp, #16]
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <siprintf+0x38>)
 800387a:	4909      	ldr	r1, [pc, #36]	; (80038a0 <siprintf+0x3c>)
 800387c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	a902      	add	r1, sp, #8
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	f000 f866 	bl	8003958 <_svfiprintf_r>
 800388c:	2200      	movs	r2, #0
 800388e:	9b02      	ldr	r3, [sp, #8]
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	b01c      	add	sp, #112	; 0x70
 8003894:	f85d eb04 	ldr.w	lr, [sp], #4
 8003898:	b003      	add	sp, #12
 800389a:	4770      	bx	lr
 800389c:	20000014 	.word	0x20000014
 80038a0:	ffff0208 	.word	0xffff0208

080038a4 <__ssputs_r>:
 80038a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a8:	688e      	ldr	r6, [r1, #8]
 80038aa:	4682      	mov	sl, r0
 80038ac:	429e      	cmp	r6, r3
 80038ae:	460c      	mov	r4, r1
 80038b0:	4690      	mov	r8, r2
 80038b2:	4699      	mov	r9, r3
 80038b4:	d837      	bhi.n	8003926 <__ssputs_r+0x82>
 80038b6:	898a      	ldrh	r2, [r1, #12]
 80038b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038bc:	d031      	beq.n	8003922 <__ssputs_r+0x7e>
 80038be:	2302      	movs	r3, #2
 80038c0:	6825      	ldr	r5, [r4, #0]
 80038c2:	6909      	ldr	r1, [r1, #16]
 80038c4:	1a6f      	subs	r7, r5, r1
 80038c6:	6965      	ldr	r5, [r4, #20]
 80038c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80038d0:	f109 0301 	add.w	r3, r9, #1
 80038d4:	443b      	add	r3, r7
 80038d6:	429d      	cmp	r5, r3
 80038d8:	bf38      	it	cc
 80038da:	461d      	movcc	r5, r3
 80038dc:	0553      	lsls	r3, r2, #21
 80038de:	d530      	bpl.n	8003942 <__ssputs_r+0x9e>
 80038e0:	4629      	mov	r1, r5
 80038e2:	f000 fb37 	bl	8003f54 <_malloc_r>
 80038e6:	4606      	mov	r6, r0
 80038e8:	b950      	cbnz	r0, 8003900 <__ssputs_r+0x5c>
 80038ea:	230c      	movs	r3, #12
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f8ca 3000 	str.w	r3, [sl]
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003900:	463a      	mov	r2, r7
 8003902:	6921      	ldr	r1, [r4, #16]
 8003904:	f000 fab6 	bl	8003e74 <memcpy>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800390e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	6126      	str	r6, [r4, #16]
 8003916:	443e      	add	r6, r7
 8003918:	6026      	str	r6, [r4, #0]
 800391a:	464e      	mov	r6, r9
 800391c:	6165      	str	r5, [r4, #20]
 800391e:	1bed      	subs	r5, r5, r7
 8003920:	60a5      	str	r5, [r4, #8]
 8003922:	454e      	cmp	r6, r9
 8003924:	d900      	bls.n	8003928 <__ssputs_r+0x84>
 8003926:	464e      	mov	r6, r9
 8003928:	4632      	mov	r2, r6
 800392a:	4641      	mov	r1, r8
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	f000 faac 	bl	8003e8a <memmove>
 8003932:	68a3      	ldr	r3, [r4, #8]
 8003934:	2000      	movs	r0, #0
 8003936:	1b9b      	subs	r3, r3, r6
 8003938:	60a3      	str	r3, [r4, #8]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	441e      	add	r6, r3
 800393e:	6026      	str	r6, [r4, #0]
 8003940:	e7dc      	b.n	80038fc <__ssputs_r+0x58>
 8003942:	462a      	mov	r2, r5
 8003944:	f000 fb60 	bl	8004008 <_realloc_r>
 8003948:	4606      	mov	r6, r0
 800394a:	2800      	cmp	r0, #0
 800394c:	d1e2      	bne.n	8003914 <__ssputs_r+0x70>
 800394e:	6921      	ldr	r1, [r4, #16]
 8003950:	4650      	mov	r0, sl
 8003952:	f000 fab3 	bl	8003ebc <_free_r>
 8003956:	e7c8      	b.n	80038ea <__ssputs_r+0x46>

08003958 <_svfiprintf_r>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	461d      	mov	r5, r3
 800395e:	898b      	ldrh	r3, [r1, #12]
 8003960:	b09d      	sub	sp, #116	; 0x74
 8003962:	061f      	lsls	r7, r3, #24
 8003964:	4680      	mov	r8, r0
 8003966:	460c      	mov	r4, r1
 8003968:	4616      	mov	r6, r2
 800396a:	d50f      	bpl.n	800398c <_svfiprintf_r+0x34>
 800396c:	690b      	ldr	r3, [r1, #16]
 800396e:	b96b      	cbnz	r3, 800398c <_svfiprintf_r+0x34>
 8003970:	2140      	movs	r1, #64	; 0x40
 8003972:	f000 faef 	bl	8003f54 <_malloc_r>
 8003976:	6020      	str	r0, [r4, #0]
 8003978:	6120      	str	r0, [r4, #16]
 800397a:	b928      	cbnz	r0, 8003988 <_svfiprintf_r+0x30>
 800397c:	230c      	movs	r3, #12
 800397e:	f8c8 3000 	str.w	r3, [r8]
 8003982:	f04f 30ff 	mov.w	r0, #4294967295
 8003986:	e0c8      	b.n	8003b1a <_svfiprintf_r+0x1c2>
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	6163      	str	r3, [r4, #20]
 800398c:	2300      	movs	r3, #0
 800398e:	9309      	str	r3, [sp, #36]	; 0x24
 8003990:	2320      	movs	r3, #32
 8003992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003996:	2330      	movs	r3, #48	; 0x30
 8003998:	f04f 0b01 	mov.w	fp, #1
 800399c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039a0:	9503      	str	r5, [sp, #12]
 80039a2:	4637      	mov	r7, r6
 80039a4:	463d      	mov	r5, r7
 80039a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039aa:	b10b      	cbz	r3, 80039b0 <_svfiprintf_r+0x58>
 80039ac:	2b25      	cmp	r3, #37	; 0x25
 80039ae:	d13e      	bne.n	8003a2e <_svfiprintf_r+0xd6>
 80039b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80039b4:	d00b      	beq.n	80039ce <_svfiprintf_r+0x76>
 80039b6:	4653      	mov	r3, sl
 80039b8:	4632      	mov	r2, r6
 80039ba:	4621      	mov	r1, r4
 80039bc:	4640      	mov	r0, r8
 80039be:	f7ff ff71 	bl	80038a4 <__ssputs_r>
 80039c2:	3001      	adds	r0, #1
 80039c4:	f000 80a4 	beq.w	8003b10 <_svfiprintf_r+0x1b8>
 80039c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ca:	4453      	add	r3, sl
 80039cc:	9309      	str	r3, [sp, #36]	; 0x24
 80039ce:	783b      	ldrb	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 809d 	beq.w	8003b10 <_svfiprintf_r+0x1b8>
 80039d6:	2300      	movs	r3, #0
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295
 80039dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	9307      	str	r3, [sp, #28]
 80039e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039e8:	931a      	str	r3, [sp, #104]	; 0x68
 80039ea:	462f      	mov	r7, r5
 80039ec:	2205      	movs	r2, #5
 80039ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039f2:	4850      	ldr	r0, [pc, #320]	; (8003b34 <_svfiprintf_r+0x1dc>)
 80039f4:	f000 fa30 	bl	8003e58 <memchr>
 80039f8:	9b04      	ldr	r3, [sp, #16]
 80039fa:	b9d0      	cbnz	r0, 8003a32 <_svfiprintf_r+0xda>
 80039fc:	06d9      	lsls	r1, r3, #27
 80039fe:	bf44      	itt	mi
 8003a00:	2220      	movmi	r2, #32
 8003a02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a06:	071a      	lsls	r2, r3, #28
 8003a08:	bf44      	itt	mi
 8003a0a:	222b      	movmi	r2, #43	; 0x2b
 8003a0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a10:	782a      	ldrb	r2, [r5, #0]
 8003a12:	2a2a      	cmp	r2, #42	; 0x2a
 8003a14:	d015      	beq.n	8003a42 <_svfiprintf_r+0xea>
 8003a16:	462f      	mov	r7, r5
 8003a18:	2000      	movs	r0, #0
 8003a1a:	250a      	movs	r5, #10
 8003a1c:	9a07      	ldr	r2, [sp, #28]
 8003a1e:	4639      	mov	r1, r7
 8003a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a24:	3b30      	subs	r3, #48	; 0x30
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d94d      	bls.n	8003ac6 <_svfiprintf_r+0x16e>
 8003a2a:	b1b8      	cbz	r0, 8003a5c <_svfiprintf_r+0x104>
 8003a2c:	e00f      	b.n	8003a4e <_svfiprintf_r+0xf6>
 8003a2e:	462f      	mov	r7, r5
 8003a30:	e7b8      	b.n	80039a4 <_svfiprintf_r+0x4c>
 8003a32:	4a40      	ldr	r2, [pc, #256]	; (8003b34 <_svfiprintf_r+0x1dc>)
 8003a34:	463d      	mov	r5, r7
 8003a36:	1a80      	subs	r0, r0, r2
 8003a38:	fa0b f000 	lsl.w	r0, fp, r0
 8003a3c:	4318      	orrs	r0, r3
 8003a3e:	9004      	str	r0, [sp, #16]
 8003a40:	e7d3      	b.n	80039ea <_svfiprintf_r+0x92>
 8003a42:	9a03      	ldr	r2, [sp, #12]
 8003a44:	1d11      	adds	r1, r2, #4
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	9103      	str	r1, [sp, #12]
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	db01      	blt.n	8003a52 <_svfiprintf_r+0xfa>
 8003a4e:	9207      	str	r2, [sp, #28]
 8003a50:	e004      	b.n	8003a5c <_svfiprintf_r+0x104>
 8003a52:	4252      	negs	r2, r2
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	9207      	str	r2, [sp, #28]
 8003a5a:	9304      	str	r3, [sp, #16]
 8003a5c:	783b      	ldrb	r3, [r7, #0]
 8003a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a60:	d10c      	bne.n	8003a7c <_svfiprintf_r+0x124>
 8003a62:	787b      	ldrb	r3, [r7, #1]
 8003a64:	2b2a      	cmp	r3, #42	; 0x2a
 8003a66:	d133      	bne.n	8003ad0 <_svfiprintf_r+0x178>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	3702      	adds	r7, #2
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	9203      	str	r2, [sp, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfb8      	it	lt
 8003a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	4d2e      	ldr	r5, [pc, #184]	; (8003b38 <_svfiprintf_r+0x1e0>)
 8003a7e:	2203      	movs	r2, #3
 8003a80:	7839      	ldrb	r1, [r7, #0]
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f9e8 	bl	8003e58 <memchr>
 8003a88:	b138      	cbz	r0, 8003a9a <_svfiprintf_r+0x142>
 8003a8a:	2340      	movs	r3, #64	; 0x40
 8003a8c:	1b40      	subs	r0, r0, r5
 8003a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a92:	9b04      	ldr	r3, [sp, #16]
 8003a94:	3701      	adds	r7, #1
 8003a96:	4303      	orrs	r3, r0
 8003a98:	9304      	str	r3, [sp, #16]
 8003a9a:	7839      	ldrb	r1, [r7, #0]
 8003a9c:	2206      	movs	r2, #6
 8003a9e:	4827      	ldr	r0, [pc, #156]	; (8003b3c <_svfiprintf_r+0x1e4>)
 8003aa0:	1c7e      	adds	r6, r7, #1
 8003aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aa6:	f000 f9d7 	bl	8003e58 <memchr>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d038      	beq.n	8003b20 <_svfiprintf_r+0x1c8>
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <_svfiprintf_r+0x1e8>)
 8003ab0:	bb13      	cbnz	r3, 8003af8 <_svfiprintf_r+0x1a0>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	3307      	adds	r3, #7
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	3308      	adds	r3, #8
 8003abc:	9303      	str	r3, [sp, #12]
 8003abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac0:	444b      	add	r3, r9
 8003ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac4:	e76d      	b.n	80039a2 <_svfiprintf_r+0x4a>
 8003ac6:	fb05 3202 	mla	r2, r5, r2, r3
 8003aca:	2001      	movs	r0, #1
 8003acc:	460f      	mov	r7, r1
 8003ace:	e7a6      	b.n	8003a1e <_svfiprintf_r+0xc6>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	250a      	movs	r5, #10
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	3701      	adds	r7, #1
 8003ad8:	9305      	str	r3, [sp, #20]
 8003ada:	4638      	mov	r0, r7
 8003adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae0:	3a30      	subs	r2, #48	; 0x30
 8003ae2:	2a09      	cmp	r2, #9
 8003ae4:	d903      	bls.n	8003aee <_svfiprintf_r+0x196>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0c8      	beq.n	8003a7c <_svfiprintf_r+0x124>
 8003aea:	9105      	str	r1, [sp, #20]
 8003aec:	e7c6      	b.n	8003a7c <_svfiprintf_r+0x124>
 8003aee:	fb05 2101 	mla	r1, r5, r1, r2
 8003af2:	2301      	movs	r3, #1
 8003af4:	4607      	mov	r7, r0
 8003af6:	e7f0      	b.n	8003ada <_svfiprintf_r+0x182>
 8003af8:	ab03      	add	r3, sp, #12
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4622      	mov	r2, r4
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <_svfiprintf_r+0x1ec>)
 8003b00:	a904      	add	r1, sp, #16
 8003b02:	4640      	mov	r0, r8
 8003b04:	f3af 8000 	nop.w
 8003b08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b0c:	4681      	mov	r9, r0
 8003b0e:	d1d6      	bne.n	8003abe <_svfiprintf_r+0x166>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	065b      	lsls	r3, r3, #25
 8003b14:	f53f af35 	bmi.w	8003982 <_svfiprintf_r+0x2a>
 8003b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b1a:	b01d      	add	sp, #116	; 0x74
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	4622      	mov	r2, r4
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <_svfiprintf_r+0x1ec>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f000 f882 	bl	8003c34 <_printf_i>
 8003b30:	e7ea      	b.n	8003b08 <_svfiprintf_r+0x1b0>
 8003b32:	bf00      	nop
 8003b34:	08004184 	.word	0x08004184
 8003b38:	0800418a 	.word	0x0800418a
 8003b3c:	0800418e 	.word	0x0800418e
 8003b40:	00000000 	.word	0x00000000
 8003b44:	080038a5 	.word	0x080038a5

08003b48 <_printf_common>:
 8003b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	4691      	mov	r9, r2
 8003b4e:	461f      	mov	r7, r3
 8003b50:	688a      	ldr	r2, [r1, #8]
 8003b52:	690b      	ldr	r3, [r1, #16]
 8003b54:	4606      	mov	r6, r0
 8003b56:	4293      	cmp	r3, r2
 8003b58:	bfb8      	it	lt
 8003b5a:	4613      	movlt	r3, r2
 8003b5c:	f8c9 3000 	str.w	r3, [r9]
 8003b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b64:	460c      	mov	r4, r1
 8003b66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b6a:	b112      	cbz	r2, 8003b72 <_printf_common+0x2a>
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f8c9 3000 	str.w	r3, [r9]
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	0699      	lsls	r1, r3, #26
 8003b76:	bf42      	ittt	mi
 8003b78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b7c:	3302      	addmi	r3, #2
 8003b7e:	f8c9 3000 	strmi.w	r3, [r9]
 8003b82:	6825      	ldr	r5, [r4, #0]
 8003b84:	f015 0506 	ands.w	r5, r5, #6
 8003b88:	d107      	bne.n	8003b9a <_printf_common+0x52>
 8003b8a:	f104 0a19 	add.w	sl, r4, #25
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	f8d9 2000 	ldr.w	r2, [r9]
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	42ab      	cmp	r3, r5
 8003b98:	dc29      	bgt.n	8003bee <_printf_common+0xa6>
 8003b9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	3300      	adds	r3, #0
 8003ba2:	bf18      	it	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	0692      	lsls	r2, r2, #26
 8003ba8:	d42e      	bmi.n	8003c08 <_printf_common+0xc0>
 8003baa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bae:	4639      	mov	r1, r7
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	47c0      	blx	r8
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d021      	beq.n	8003bfc <_printf_common+0xb4>
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	68e5      	ldr	r5, [r4, #12]
 8003bbc:	f003 0306 	and.w	r3, r3, #6
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	bf18      	it	ne
 8003bc4:	2500      	movne	r5, #0
 8003bc6:	f8d9 2000 	ldr.w	r2, [r9]
 8003bca:	f04f 0900 	mov.w	r9, #0
 8003bce:	bf08      	it	eq
 8003bd0:	1aad      	subeq	r5, r5, r2
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	6922      	ldr	r2, [r4, #16]
 8003bd6:	bf08      	it	eq
 8003bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bfc4      	itt	gt
 8003be0:	1a9b      	subgt	r3, r3, r2
 8003be2:	18ed      	addgt	r5, r5, r3
 8003be4:	341a      	adds	r4, #26
 8003be6:	454d      	cmp	r5, r9
 8003be8:	d11a      	bne.n	8003c20 <_printf_common+0xd8>
 8003bea:	2000      	movs	r0, #0
 8003bec:	e008      	b.n	8003c00 <_printf_common+0xb8>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4652      	mov	r2, sl
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	47c0      	blx	r8
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d103      	bne.n	8003c04 <_printf_common+0xbc>
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c04:	3501      	adds	r5, #1
 8003c06:	e7c2      	b.n	8003b8e <_printf_common+0x46>
 8003c08:	2030      	movs	r0, #48	; 0x30
 8003c0a:	18e1      	adds	r1, r4, r3
 8003c0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c16:	4422      	add	r2, r4
 8003c18:	3302      	adds	r3, #2
 8003c1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c1e:	e7c4      	b.n	8003baa <_printf_common+0x62>
 8003c20:	2301      	movs	r3, #1
 8003c22:	4622      	mov	r2, r4
 8003c24:	4639      	mov	r1, r7
 8003c26:	4630      	mov	r0, r6
 8003c28:	47c0      	blx	r8
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d0e6      	beq.n	8003bfc <_printf_common+0xb4>
 8003c2e:	f109 0901 	add.w	r9, r9, #1
 8003c32:	e7d8      	b.n	8003be6 <_printf_common+0x9e>

08003c34 <_printf_i>:
 8003c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	7e09      	ldrb	r1, [r1, #24]
 8003c40:	b085      	sub	sp, #20
 8003c42:	296e      	cmp	r1, #110	; 0x6e
 8003c44:	4617      	mov	r7, r2
 8003c46:	4606      	mov	r6, r0
 8003c48:	4698      	mov	r8, r3
 8003c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c4c:	f000 80b3 	beq.w	8003db6 <_printf_i+0x182>
 8003c50:	d822      	bhi.n	8003c98 <_printf_i+0x64>
 8003c52:	2963      	cmp	r1, #99	; 0x63
 8003c54:	d036      	beq.n	8003cc4 <_printf_i+0x90>
 8003c56:	d80a      	bhi.n	8003c6e <_printf_i+0x3a>
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	f000 80b9 	beq.w	8003dd0 <_printf_i+0x19c>
 8003c5e:	2958      	cmp	r1, #88	; 0x58
 8003c60:	f000 8083 	beq.w	8003d6a <_printf_i+0x136>
 8003c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c6c:	e032      	b.n	8003cd4 <_printf_i+0xa0>
 8003c6e:	2964      	cmp	r1, #100	; 0x64
 8003c70:	d001      	beq.n	8003c76 <_printf_i+0x42>
 8003c72:	2969      	cmp	r1, #105	; 0x69
 8003c74:	d1f6      	bne.n	8003c64 <_printf_i+0x30>
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	6813      	ldr	r3, [r2, #0]
 8003c7a:	0605      	lsls	r5, r0, #24
 8003c7c:	f103 0104 	add.w	r1, r3, #4
 8003c80:	d52a      	bpl.n	8003cd8 <_printf_i+0xa4>
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da03      	bge.n	8003c92 <_printf_i+0x5e>
 8003c8a:	222d      	movs	r2, #45	; 0x2d
 8003c8c:	425b      	negs	r3, r3
 8003c8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c92:	486f      	ldr	r0, [pc, #444]	; (8003e50 <_printf_i+0x21c>)
 8003c94:	220a      	movs	r2, #10
 8003c96:	e039      	b.n	8003d0c <_printf_i+0xd8>
 8003c98:	2973      	cmp	r1, #115	; 0x73
 8003c9a:	f000 809d 	beq.w	8003dd8 <_printf_i+0x1a4>
 8003c9e:	d808      	bhi.n	8003cb2 <_printf_i+0x7e>
 8003ca0:	296f      	cmp	r1, #111	; 0x6f
 8003ca2:	d020      	beq.n	8003ce6 <_printf_i+0xb2>
 8003ca4:	2970      	cmp	r1, #112	; 0x70
 8003ca6:	d1dd      	bne.n	8003c64 <_printf_i+0x30>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	f043 0320 	orr.w	r3, r3, #32
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	e003      	b.n	8003cba <_printf_i+0x86>
 8003cb2:	2975      	cmp	r1, #117	; 0x75
 8003cb4:	d017      	beq.n	8003ce6 <_printf_i+0xb2>
 8003cb6:	2978      	cmp	r1, #120	; 0x78
 8003cb8:	d1d4      	bne.n	8003c64 <_printf_i+0x30>
 8003cba:	2378      	movs	r3, #120	; 0x78
 8003cbc:	4865      	ldr	r0, [pc, #404]	; (8003e54 <_printf_i+0x220>)
 8003cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cc2:	e055      	b.n	8003d70 <_printf_i+0x13c>
 8003cc4:	6813      	ldr	r3, [r2, #0]
 8003cc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cca:	1d19      	adds	r1, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6011      	str	r1, [r2, #0]
 8003cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e08c      	b.n	8003df2 <_printf_i+0x1be>
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cde:	6011      	str	r1, [r2, #0]
 8003ce0:	bf18      	it	ne
 8003ce2:	b21b      	sxthne	r3, r3
 8003ce4:	e7cf      	b.n	8003c86 <_printf_i+0x52>
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	6825      	ldr	r5, [r4, #0]
 8003cea:	1d18      	adds	r0, r3, #4
 8003cec:	6010      	str	r0, [r2, #0]
 8003cee:	0628      	lsls	r0, r5, #24
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_i+0xc2>
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0xc8>
 8003cf6:	0668      	lsls	r0, r5, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0xbe>
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	296f      	cmp	r1, #111	; 0x6f
 8003cfe:	bf14      	ite	ne
 8003d00:	220a      	movne	r2, #10
 8003d02:	2208      	moveq	r2, #8
 8003d04:	4852      	ldr	r0, [pc, #328]	; (8003e50 <_printf_i+0x21c>)
 8003d06:	2100      	movs	r1, #0
 8003d08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0c:	6865      	ldr	r5, [r4, #4]
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	60a5      	str	r5, [r4, #8]
 8003d12:	f2c0 8095 	blt.w	8003e40 <_printf_i+0x20c>
 8003d16:	6821      	ldr	r1, [r4, #0]
 8003d18:	f021 0104 	bic.w	r1, r1, #4
 8003d1c:	6021      	str	r1, [r4, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13d      	bne.n	8003d9e <_printf_i+0x16a>
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	f040 808e 	bne.w	8003e44 <_printf_i+0x210>
 8003d28:	4665      	mov	r5, ip
 8003d2a:	2a08      	cmp	r2, #8
 8003d2c:	d10b      	bne.n	8003d46 <_printf_i+0x112>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	07db      	lsls	r3, r3, #31
 8003d32:	d508      	bpl.n	8003d46 <_printf_i+0x112>
 8003d34:	6923      	ldr	r3, [r4, #16]
 8003d36:	6862      	ldr	r2, [r4, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bfde      	ittt	le
 8003d3c:	2330      	movle	r3, #48	; 0x30
 8003d3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d46:	ebac 0305 	sub.w	r3, ip, r5
 8003d4a:	6123      	str	r3, [r4, #16]
 8003d4c:	f8cd 8000 	str.w	r8, [sp]
 8003d50:	463b      	mov	r3, r7
 8003d52:	aa03      	add	r2, sp, #12
 8003d54:	4621      	mov	r1, r4
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7ff fef6 	bl	8003b48 <_printf_common>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d14d      	bne.n	8003dfc <_printf_i+0x1c8>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b005      	add	sp, #20
 8003d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d6a:	4839      	ldr	r0, [pc, #228]	; (8003e50 <_printf_i+0x21c>)
 8003d6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	6821      	ldr	r1, [r4, #0]
 8003d74:	1d1d      	adds	r5, r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6015      	str	r5, [r2, #0]
 8003d7a:	060a      	lsls	r2, r1, #24
 8003d7c:	d50b      	bpl.n	8003d96 <_printf_i+0x162>
 8003d7e:	07ca      	lsls	r2, r1, #31
 8003d80:	bf44      	itt	mi
 8003d82:	f041 0120 	orrmi.w	r1, r1, #32
 8003d86:	6021      	strmi	r1, [r4, #0]
 8003d88:	b91b      	cbnz	r3, 8003d92 <_printf_i+0x15e>
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	f022 0220 	bic.w	r2, r2, #32
 8003d90:	6022      	str	r2, [r4, #0]
 8003d92:	2210      	movs	r2, #16
 8003d94:	e7b7      	b.n	8003d06 <_printf_i+0xd2>
 8003d96:	064d      	lsls	r5, r1, #25
 8003d98:	bf48      	it	mi
 8003d9a:	b29b      	uxthmi	r3, r3
 8003d9c:	e7ef      	b.n	8003d7e <_printf_i+0x14a>
 8003d9e:	4665      	mov	r5, ip
 8003da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003da4:	fb02 3311 	mls	r3, r2, r1, r3
 8003da8:	5cc3      	ldrb	r3, [r0, r3]
 8003daa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003dae:	460b      	mov	r3, r1
 8003db0:	2900      	cmp	r1, #0
 8003db2:	d1f5      	bne.n	8003da0 <_printf_i+0x16c>
 8003db4:	e7b9      	b.n	8003d2a <_printf_i+0xf6>
 8003db6:	6813      	ldr	r3, [r2, #0]
 8003db8:	6825      	ldr	r5, [r4, #0]
 8003dba:	1d18      	adds	r0, r3, #4
 8003dbc:	6961      	ldr	r1, [r4, #20]
 8003dbe:	6010      	str	r0, [r2, #0]
 8003dc0:	0628      	lsls	r0, r5, #24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	d501      	bpl.n	8003dca <_printf_i+0x196>
 8003dc6:	6019      	str	r1, [r3, #0]
 8003dc8:	e002      	b.n	8003dd0 <_printf_i+0x19c>
 8003dca:	066a      	lsls	r2, r5, #25
 8003dcc:	d5fb      	bpl.n	8003dc6 <_printf_i+0x192>
 8003dce:	8019      	strh	r1, [r3, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4665      	mov	r5, ip
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	e7b9      	b.n	8003d4c <_printf_i+0x118>
 8003dd8:	6813      	ldr	r3, [r2, #0]
 8003dda:	1d19      	adds	r1, r3, #4
 8003ddc:	6011      	str	r1, [r2, #0]
 8003dde:	681d      	ldr	r5, [r3, #0]
 8003de0:	6862      	ldr	r2, [r4, #4]
 8003de2:	2100      	movs	r1, #0
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f837 	bl	8003e58 <memchr>
 8003dea:	b108      	cbz	r0, 8003df0 <_printf_i+0x1bc>
 8003dec:	1b40      	subs	r0, r0, r5
 8003dee:	6060      	str	r0, [r4, #4]
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	6123      	str	r3, [r4, #16]
 8003df4:	2300      	movs	r3, #0
 8003df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfa:	e7a7      	b.n	8003d4c <_printf_i+0x118>
 8003dfc:	6923      	ldr	r3, [r4, #16]
 8003dfe:	462a      	mov	r2, r5
 8003e00:	4639      	mov	r1, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	47c0      	blx	r8
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0aa      	beq.n	8003d60 <_printf_i+0x12c>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	079b      	lsls	r3, r3, #30
 8003e0e:	d413      	bmi.n	8003e38 <_printf_i+0x204>
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	4298      	cmp	r0, r3
 8003e16:	bfb8      	it	lt
 8003e18:	4618      	movlt	r0, r3
 8003e1a:	e7a3      	b.n	8003d64 <_printf_i+0x130>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	464a      	mov	r2, r9
 8003e20:	4639      	mov	r1, r7
 8003e22:	4630      	mov	r0, r6
 8003e24:	47c0      	blx	r8
 8003e26:	3001      	adds	r0, #1
 8003e28:	d09a      	beq.n	8003d60 <_printf_i+0x12c>
 8003e2a:	3501      	adds	r5, #1
 8003e2c:	68e3      	ldr	r3, [r4, #12]
 8003e2e:	9a03      	ldr	r2, [sp, #12]
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	42ab      	cmp	r3, r5
 8003e34:	dcf2      	bgt.n	8003e1c <_printf_i+0x1e8>
 8003e36:	e7eb      	b.n	8003e10 <_printf_i+0x1dc>
 8003e38:	2500      	movs	r5, #0
 8003e3a:	f104 0919 	add.w	r9, r4, #25
 8003e3e:	e7f5      	b.n	8003e2c <_printf_i+0x1f8>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ac      	bne.n	8003d9e <_printf_i+0x16a>
 8003e44:	7803      	ldrb	r3, [r0, #0]
 8003e46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e4e:	e76c      	b.n	8003d2a <_printf_i+0xf6>
 8003e50:	08004195 	.word	0x08004195
 8003e54:	080041a6 	.word	0x080041a6

08003e58 <memchr>:
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	b2c9      	uxtb	r1, r1
 8003e5c:	4402      	add	r2, r0
 8003e5e:	4290      	cmp	r0, r2
 8003e60:	4603      	mov	r3, r0
 8003e62:	d101      	bne.n	8003e68 <memchr+0x10>
 8003e64:	2300      	movs	r3, #0
 8003e66:	e003      	b.n	8003e70 <memchr+0x18>
 8003e68:	781c      	ldrb	r4, [r3, #0]
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	428c      	cmp	r4, r1
 8003e6e:	d1f6      	bne.n	8003e5e <memchr+0x6>
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <memcpy>:
 8003e74:	b510      	push	{r4, lr}
 8003e76:	1e43      	subs	r3, r0, #1
 8003e78:	440a      	add	r2, r1
 8003e7a:	4291      	cmp	r1, r2
 8003e7c:	d100      	bne.n	8003e80 <memcpy+0xc>
 8003e7e:	bd10      	pop	{r4, pc}
 8003e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e88:	e7f7      	b.n	8003e7a <memcpy+0x6>

08003e8a <memmove>:
 8003e8a:	4288      	cmp	r0, r1
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	eb01 0302 	add.w	r3, r1, r2
 8003e92:	d807      	bhi.n	8003ea4 <memmove+0x1a>
 8003e94:	1e42      	subs	r2, r0, #1
 8003e96:	4299      	cmp	r1, r3
 8003e98:	d00a      	beq.n	8003eb0 <memmove+0x26>
 8003e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ea2:	e7f8      	b.n	8003e96 <memmove+0xc>
 8003ea4:	4283      	cmp	r3, r0
 8003ea6:	d9f5      	bls.n	8003e94 <memmove+0xa>
 8003ea8:	1881      	adds	r1, r0, r2
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	42d3      	cmn	r3, r2
 8003eae:	d100      	bne.n	8003eb2 <memmove+0x28>
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eb6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003eba:	e7f7      	b.n	8003eac <memmove+0x22>

08003ebc <_free_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	2900      	cmp	r1, #0
 8003ec2:	d043      	beq.n	8003f4c <_free_r+0x90>
 8003ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec8:	1f0c      	subs	r4, r1, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bfb8      	it	lt
 8003ece:	18e4      	addlt	r4, r4, r3
 8003ed0:	f000 f8d0 	bl	8004074 <__malloc_lock>
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <_free_r+0x94>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	4610      	mov	r0, r2
 8003eda:	b933      	cbnz	r3, 8003eea <_free_r+0x2e>
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6014      	str	r4, [r2, #0]
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee6:	f000 b8c6 	b.w	8004076 <__malloc_unlock>
 8003eea:	42a3      	cmp	r3, r4
 8003eec:	d90b      	bls.n	8003f06 <_free_r+0x4a>
 8003eee:	6821      	ldr	r1, [r4, #0]
 8003ef0:	1862      	adds	r2, r4, r1
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bf01      	itttt	eq
 8003ef6:	681a      	ldreq	r2, [r3, #0]
 8003ef8:	685b      	ldreq	r3, [r3, #4]
 8003efa:	1852      	addeq	r2, r2, r1
 8003efc:	6022      	streq	r2, [r4, #0]
 8003efe:	6063      	str	r3, [r4, #4]
 8003f00:	6004      	str	r4, [r0, #0]
 8003f02:	e7ed      	b.n	8003ee0 <_free_r+0x24>
 8003f04:	4613      	mov	r3, r2
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	b10a      	cbz	r2, 8003f0e <_free_r+0x52>
 8003f0a:	42a2      	cmp	r2, r4
 8003f0c:	d9fa      	bls.n	8003f04 <_free_r+0x48>
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	1858      	adds	r0, r3, r1
 8003f12:	42a0      	cmp	r0, r4
 8003f14:	d10b      	bne.n	8003f2e <_free_r+0x72>
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	4401      	add	r1, r0
 8003f1a:	1858      	adds	r0, r3, r1
 8003f1c:	4282      	cmp	r2, r0
 8003f1e:	6019      	str	r1, [r3, #0]
 8003f20:	d1de      	bne.n	8003ee0 <_free_r+0x24>
 8003f22:	6810      	ldr	r0, [r2, #0]
 8003f24:	6852      	ldr	r2, [r2, #4]
 8003f26:	4401      	add	r1, r0
 8003f28:	6019      	str	r1, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	e7d8      	b.n	8003ee0 <_free_r+0x24>
 8003f2e:	d902      	bls.n	8003f36 <_free_r+0x7a>
 8003f30:	230c      	movs	r3, #12
 8003f32:	602b      	str	r3, [r5, #0]
 8003f34:	e7d4      	b.n	8003ee0 <_free_r+0x24>
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	1821      	adds	r1, r4, r0
 8003f3a:	428a      	cmp	r2, r1
 8003f3c:	bf01      	itttt	eq
 8003f3e:	6811      	ldreq	r1, [r2, #0]
 8003f40:	6852      	ldreq	r2, [r2, #4]
 8003f42:	1809      	addeq	r1, r1, r0
 8003f44:	6021      	streq	r1, [r4, #0]
 8003f46:	6062      	str	r2, [r4, #4]
 8003f48:	605c      	str	r4, [r3, #4]
 8003f4a:	e7c9      	b.n	8003ee0 <_free_r+0x24>
 8003f4c:	bd38      	pop	{r3, r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	200000a0 	.word	0x200000a0

08003f54 <_malloc_r>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	1ccd      	adds	r5, r1, #3
 8003f58:	f025 0503 	bic.w	r5, r5, #3
 8003f5c:	3508      	adds	r5, #8
 8003f5e:	2d0c      	cmp	r5, #12
 8003f60:	bf38      	it	cc
 8003f62:	250c      	movcc	r5, #12
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	4606      	mov	r6, r0
 8003f68:	db01      	blt.n	8003f6e <_malloc_r+0x1a>
 8003f6a:	42a9      	cmp	r1, r5
 8003f6c:	d903      	bls.n	8003f76 <_malloc_r+0x22>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	6033      	str	r3, [r6, #0]
 8003f72:	2000      	movs	r0, #0
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
 8003f76:	f000 f87d 	bl	8004074 <__malloc_lock>
 8003f7a:	4a21      	ldr	r2, [pc, #132]	; (8004000 <_malloc_r+0xac>)
 8003f7c:	6814      	ldr	r4, [r2, #0]
 8003f7e:	4621      	mov	r1, r4
 8003f80:	b991      	cbnz	r1, 8003fa8 <_malloc_r+0x54>
 8003f82:	4c20      	ldr	r4, [pc, #128]	; (8004004 <_malloc_r+0xb0>)
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	b91b      	cbnz	r3, 8003f90 <_malloc_r+0x3c>
 8003f88:	4630      	mov	r0, r6
 8003f8a:	f000 f863 	bl	8004054 <_sbrk_r>
 8003f8e:	6020      	str	r0, [r4, #0]
 8003f90:	4629      	mov	r1, r5
 8003f92:	4630      	mov	r0, r6
 8003f94:	f000 f85e 	bl	8004054 <_sbrk_r>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d124      	bne.n	8003fe6 <_malloc_r+0x92>
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	f000 f868 	bl	8004076 <__malloc_unlock>
 8003fa6:	e7e4      	b.n	8003f72 <_malloc_r+0x1e>
 8003fa8:	680b      	ldr	r3, [r1, #0]
 8003faa:	1b5b      	subs	r3, r3, r5
 8003fac:	d418      	bmi.n	8003fe0 <_malloc_r+0x8c>
 8003fae:	2b0b      	cmp	r3, #11
 8003fb0:	d90f      	bls.n	8003fd2 <_malloc_r+0x7e>
 8003fb2:	600b      	str	r3, [r1, #0]
 8003fb4:	18cc      	adds	r4, r1, r3
 8003fb6:	50cd      	str	r5, [r1, r3]
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f85c 	bl	8004076 <__malloc_unlock>
 8003fbe:	f104 000b 	add.w	r0, r4, #11
 8003fc2:	1d23      	adds	r3, r4, #4
 8003fc4:	f020 0007 	bic.w	r0, r0, #7
 8003fc8:	1ac3      	subs	r3, r0, r3
 8003fca:	d0d3      	beq.n	8003f74 <_malloc_r+0x20>
 8003fcc:	425a      	negs	r2, r3
 8003fce:	50e2      	str	r2, [r4, r3]
 8003fd0:	e7d0      	b.n	8003f74 <_malloc_r+0x20>
 8003fd2:	684b      	ldr	r3, [r1, #4]
 8003fd4:	428c      	cmp	r4, r1
 8003fd6:	bf16      	itet	ne
 8003fd8:	6063      	strne	r3, [r4, #4]
 8003fda:	6013      	streq	r3, [r2, #0]
 8003fdc:	460c      	movne	r4, r1
 8003fde:	e7eb      	b.n	8003fb8 <_malloc_r+0x64>
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	6849      	ldr	r1, [r1, #4]
 8003fe4:	e7cc      	b.n	8003f80 <_malloc_r+0x2c>
 8003fe6:	1cc4      	adds	r4, r0, #3
 8003fe8:	f024 0403 	bic.w	r4, r4, #3
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	d005      	beq.n	8003ffc <_malloc_r+0xa8>
 8003ff0:	1a21      	subs	r1, r4, r0
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 f82e 	bl	8004054 <_sbrk_r>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d0cf      	beq.n	8003f9c <_malloc_r+0x48>
 8003ffc:	6025      	str	r5, [r4, #0]
 8003ffe:	e7db      	b.n	8003fb8 <_malloc_r+0x64>
 8004000:	200000a0 	.word	0x200000a0
 8004004:	200000a4 	.word	0x200000a4

08004008 <_realloc_r>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	4607      	mov	r7, r0
 800400c:	4614      	mov	r4, r2
 800400e:	460e      	mov	r6, r1
 8004010:	b921      	cbnz	r1, 800401c <_realloc_r+0x14>
 8004012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004016:	4611      	mov	r1, r2
 8004018:	f7ff bf9c 	b.w	8003f54 <_malloc_r>
 800401c:	b922      	cbnz	r2, 8004028 <_realloc_r+0x20>
 800401e:	f7ff ff4d 	bl	8003ebc <_free_r>
 8004022:	4625      	mov	r5, r4
 8004024:	4628      	mov	r0, r5
 8004026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004028:	f000 f826 	bl	8004078 <_malloc_usable_size_r>
 800402c:	42a0      	cmp	r0, r4
 800402e:	d20f      	bcs.n	8004050 <_realloc_r+0x48>
 8004030:	4621      	mov	r1, r4
 8004032:	4638      	mov	r0, r7
 8004034:	f7ff ff8e 	bl	8003f54 <_malloc_r>
 8004038:	4605      	mov	r5, r0
 800403a:	2800      	cmp	r0, #0
 800403c:	d0f2      	beq.n	8004024 <_realloc_r+0x1c>
 800403e:	4631      	mov	r1, r6
 8004040:	4622      	mov	r2, r4
 8004042:	f7ff ff17 	bl	8003e74 <memcpy>
 8004046:	4631      	mov	r1, r6
 8004048:	4638      	mov	r0, r7
 800404a:	f7ff ff37 	bl	8003ebc <_free_r>
 800404e:	e7e9      	b.n	8004024 <_realloc_r+0x1c>
 8004050:	4635      	mov	r5, r6
 8004052:	e7e7      	b.n	8004024 <_realloc_r+0x1c>

08004054 <_sbrk_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	2300      	movs	r3, #0
 8004058:	4c05      	ldr	r4, [pc, #20]	; (8004070 <_sbrk_r+0x1c>)
 800405a:	4605      	mov	r5, r0
 800405c:	4608      	mov	r0, r1
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	f7fd fa5a 	bl	8001518 <_sbrk>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_sbrk_r+0x1a>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	b103      	cbz	r3, 800406e <_sbrk_r+0x1a>
 800406c:	602b      	str	r3, [r5, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000178 	.word	0x20000178

08004074 <__malloc_lock>:
 8004074:	4770      	bx	lr

08004076 <__malloc_unlock>:
 8004076:	4770      	bx	lr

08004078 <_malloc_usable_size_r>:
 8004078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407c:	1f18      	subs	r0, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfbc      	itt	lt
 8004082:	580b      	ldrlt	r3, [r1, r0]
 8004084:	18c0      	addlt	r0, r0, r3
 8004086:	4770      	bx	lr

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
